
stm32l476_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002228  08008188  08008188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a3b0  0800a3b0  000033b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3f0  0800a3f0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3f0  0800a3f0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3f0  0800a3f0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3f0  0800a3f0  000033f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3f4  0800a3f4  000033f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800a3f8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  2000000c  0800a404  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  0800a404  0000472c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2e6  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed0  00000000  00000000  0000f322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  000111f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000956  00000000  00000000  00011e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260ad  00000000  00000000  0001279e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8d1  00000000  00000000  0003884b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec3be  00000000  00000000  0004611c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001324da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000324c  00000000  00000000  00132520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008188 <__do_global_dtors_aux>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4c05      	ldr	r4, [pc, #20]	@ (80081a0 <__do_global_dtors_aux+0x18>)
 800818c:	7823      	ldrb	r3, [r4, #0]
 800818e:	b933      	cbnz	r3, 800819e <__do_global_dtors_aux+0x16>
 8008190:	4b04      	ldr	r3, [pc, #16]	@ (80081a4 <__do_global_dtors_aux+0x1c>)
 8008192:	b113      	cbz	r3, 800819a <__do_global_dtors_aux+0x12>
 8008194:	4804      	ldr	r0, [pc, #16]	@ (80081a8 <__do_global_dtors_aux+0x20>)
 8008196:	f3af 8000 	nop.w
 800819a:	2301      	movs	r3, #1
 800819c:	7023      	strb	r3, [r4, #0]
 800819e:	bd10      	pop	{r4, pc}
 80081a0:	2000000c 	.word	0x2000000c
 80081a4:	00000000 	.word	0x00000000
 80081a8:	0800a398 	.word	0x0800a398

080081ac <frame_dummy>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	4b03      	ldr	r3, [pc, #12]	@ (80081bc <frame_dummy+0x10>)
 80081b0:	b11b      	cbz	r3, 80081ba <frame_dummy+0xe>
 80081b2:	4903      	ldr	r1, [pc, #12]	@ (80081c0 <frame_dummy+0x14>)
 80081b4:	4803      	ldr	r0, [pc, #12]	@ (80081c4 <frame_dummy+0x18>)
 80081b6:	f3af 8000 	nop.w
 80081ba:	bd08      	pop	{r3, pc}
 80081bc:	00000000 	.word	0x00000000
 80081c0:	20000010 	.word	0x20000010
 80081c4:	0800a398 	.word	0x0800a398

080081c8 <CANTX_FIFO_init>:
	return 0;
}

/* Public function definitions -----------------------------------------------*/

void CANTX_FIFO_init(CANTX_FIFO* o, CAN_HandleTypeDef* hcan) {
 80081c8:	b5b0      	push	{r4, r5, r7, lr}
 80081ca:	b08c      	sub	sp, #48	@ 0x30
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]

	int i;

	//hcan->pTxMsg = &(o->SendMsgBuff);

	CanTxMsgTypeDef tempzeromsg = { 0 };
 80081d2:	f107 030c 	add.w	r3, r7, #12
 80081d6:	2220      	movs	r2, #32
 80081d8:	2100      	movs	r1, #0
 80081da:	4618      	mov	r0, r3
 80081dc:	f002 f8b0 	bl	800a340 <memset>

	for (i = 0; i < CANTX_FIFO_SIZE; i++) {
 80081e0:	2300      	movs	r3, #0
 80081e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081e4:	e00f      	b.n	8008206 <CANTX_FIFO_init+0x3e>
		o->array[i] = tempzeromsg;
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ea:	015b      	lsls	r3, r3, #5
 80081ec:	4413      	add	r3, r2
 80081ee:	461d      	mov	r5, r3
 80081f0:	f107 040c 	add.w	r4, r7, #12
 80081f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80081fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	for (i = 0; i < CANTX_FIFO_SIZE; i++) {
 8008200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008202:	3301      	adds	r3, #1
 8008204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008208:	2b31      	cmp	r3, #49	@ 0x31
 800820a:	ddec      	ble.n	80081e6 <CANTX_FIFO_init+0x1e>
	}

	o->current_index = 0;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2640 	strb.w	r2, [r3, #1600]	@ 0x640
	o->current_qty_in_queue = 0;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2641 	strb.w	r2, [r3, #1601]	@ 0x641
	o->current_next_to_go_out = 0;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2642 	strb.w	r2, [r3, #1602]	@ 0x642
	o->TxInProgress = 0;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2664 	strb.w	r2, [r3, #1636]	@ 0x664
}
 800822c:	bf00      	nop
 800822e:	3730      	adds	r7, #48	@ 0x30
 8008230:	46bd      	mov	sp, r7
 8008232:	bdb0      	pop	{r4, r5, r7, pc}

08008234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008238:	f000 fab5 	bl	80087a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800823c:	f000 f820 	bl	8008280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008240:	f000 f8e0 	bl	8008404 <MX_GPIO_Init>
  MX_CAN1_Init();
 8008244:	f000 f862 	bl	800830c <MX_CAN1_Init>
  MX_CRC_Init();
 8008248:	f000 f894 	bl	8008374 <MX_CRC_Init>
  MX_TIM17_Init();
 800824c:	f000 f8b4 	bl	80083b8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

	/* Configure CAN RX FILTER */
	config_can_filter();
 8008250:	f000 f95a 	bl	8008508 <config_can_filter>

	/* Initialize CAN TX FIFO */
	CANTX_FIFO_init(&CanTxList,&hcan1);
 8008254:	4907      	ldr	r1, [pc, #28]	@ (8008274 <main+0x40>)
 8008256:	4808      	ldr	r0, [pc, #32]	@ (8008278 <main+0x44>)
 8008258:	f7ff ffb6 	bl	80081c8 <CANTX_FIFO_init>

	/* Start Timers */
	HAL_TIM_Base_Start_IT(&htim17); // 1mS
 800825c:	4807      	ldr	r0, [pc, #28]	@ (800827c <main+0x48>)
 800825e:	f001 ff65 	bl	800a12c <HAL_TIM_Base_Start_IT>

	/* Start CAN recieve Interrupt */
	HAL_CAN_Start(&hcan1);
 8008262:	4804      	ldr	r0, [pc, #16]	@ (8008274 <main+0x40>)
 8008264:	f000 fcd9 	bl	8008c1a <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8008268:	2102      	movs	r1, #2
 800826a:	4802      	ldr	r0, [pc, #8]	@ (8008274 <main+0x40>)
 800826c:	f000 fd19 	bl	8008ca2 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008270:	bf00      	nop
 8008272:	e7fd      	b.n	8008270 <main+0x3c>
 8008274:	20000690 	.word	0x20000690
 8008278:	20000028 	.word	0x20000028
 800827c:	200006dc 	.word	0x200006dc

08008280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b096      	sub	sp, #88	@ 0x58
 8008284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008286:	f107 0314 	add.w	r3, r7, #20
 800828a:	2244      	movs	r2, #68	@ 0x44
 800828c:	2100      	movs	r1, #0
 800828e:	4618      	mov	r0, r3
 8008290:	f002 f856 	bl	800a340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008294:	463b      	mov	r3, r7
 8008296:	2200      	movs	r2, #0
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	605a      	str	r2, [r3, #4]
 800829c:	609a      	str	r2, [r3, #8]
 800829e:	60da      	str	r2, [r3, #12]
 80082a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80082a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80082a6:	f001 f8cb 	bl	8009440 <HAL_PWREx_ControlVoltageScaling>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80082b0:	f000 f960 	bl	8008574 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80082b4:	2310      	movs	r3, #16
 80082b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80082b8:	2301      	movs	r3, #1
 80082ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80082c0:	2360      	movs	r3, #96	@ 0x60
 80082c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80082c4:	2300      	movs	r3, #0
 80082c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80082c8:	f107 0314 	add.w	r3, r7, #20
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 f90d 	bl	80094ec <HAL_RCC_OscConfig>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80082d8:	f000 f94c 	bl	8008574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80082dc:	230f      	movs	r3, #15
 80082de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80082e0:	2300      	movs	r3, #0
 80082e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082e4:	2300      	movs	r3, #0
 80082e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80082e8:	2300      	movs	r3, #0
 80082ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80082ec:	2300      	movs	r3, #0
 80082ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80082f0:	463b      	mov	r3, r7
 80082f2:	2100      	movs	r1, #0
 80082f4:	4618      	mov	r0, r3
 80082f6:	f001 fcd5 	bl	8009ca4 <HAL_RCC_ClockConfig>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8008300:	f000 f938 	bl	8008574 <Error_Handler>
  }
}
 8008304:	bf00      	nop
 8008306:	3758      	adds	r7, #88	@ 0x58
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8008310:	4b16      	ldr	r3, [pc, #88]	@ (800836c <MX_CAN1_Init+0x60>)
 8008312:	4a17      	ldr	r2, [pc, #92]	@ (8008370 <MX_CAN1_Init+0x64>)
 8008314:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8008316:	4b15      	ldr	r3, [pc, #84]	@ (800836c <MX_CAN1_Init+0x60>)
 8008318:	2210      	movs	r2, #16
 800831a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800831c:	4b13      	ldr	r3, [pc, #76]	@ (800836c <MX_CAN1_Init+0x60>)
 800831e:	2200      	movs	r2, #0
 8008320:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008322:	4b12      	ldr	r3, [pc, #72]	@ (800836c <MX_CAN1_Init+0x60>)
 8008324:	2200      	movs	r2, #0
 8008326:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008328:	4b10      	ldr	r3, [pc, #64]	@ (800836c <MX_CAN1_Init+0x60>)
 800832a:	2200      	movs	r2, #0
 800832c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800832e:	4b0f      	ldr	r3, [pc, #60]	@ (800836c <MX_CAN1_Init+0x60>)
 8008330:	2200      	movs	r2, #0
 8008332:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8008334:	4b0d      	ldr	r3, [pc, #52]	@ (800836c <MX_CAN1_Init+0x60>)
 8008336:	2200      	movs	r2, #0
 8008338:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800833a:	4b0c      	ldr	r3, [pc, #48]	@ (800836c <MX_CAN1_Init+0x60>)
 800833c:	2200      	movs	r2, #0
 800833e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8008340:	4b0a      	ldr	r3, [pc, #40]	@ (800836c <MX_CAN1_Init+0x60>)
 8008342:	2200      	movs	r2, #0
 8008344:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8008346:	4b09      	ldr	r3, [pc, #36]	@ (800836c <MX_CAN1_Init+0x60>)
 8008348:	2200      	movs	r2, #0
 800834a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800834c:	4b07      	ldr	r3, [pc, #28]	@ (800836c <MX_CAN1_Init+0x60>)
 800834e:	2200      	movs	r2, #0
 8008350:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8008352:	4b06      	ldr	r3, [pc, #24]	@ (800836c <MX_CAN1_Init+0x60>)
 8008354:	2200      	movs	r2, #0
 8008356:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008358:	4804      	ldr	r0, [pc, #16]	@ (800836c <MX_CAN1_Init+0x60>)
 800835a:	f000 fa99 	bl	8008890 <HAL_CAN_Init>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8008364:	f000 f906 	bl	8008574 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8008368:	bf00      	nop
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20000690 	.word	0x20000690
 8008370:	40006400 	.word	0x40006400

08008374 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008378:	4b0d      	ldr	r3, [pc, #52]	@ (80083b0 <MX_CRC_Init+0x3c>)
 800837a:	4a0e      	ldr	r2, [pc, #56]	@ (80083b4 <MX_CRC_Init+0x40>)
 800837c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800837e:	4b0c      	ldr	r3, [pc, #48]	@ (80083b0 <MX_CRC_Init+0x3c>)
 8008380:	2200      	movs	r2, #0
 8008382:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008384:	4b0a      	ldr	r3, [pc, #40]	@ (80083b0 <MX_CRC_Init+0x3c>)
 8008386:	2200      	movs	r2, #0
 8008388:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800838a:	4b09      	ldr	r3, [pc, #36]	@ (80083b0 <MX_CRC_Init+0x3c>)
 800838c:	2200      	movs	r2, #0
 800838e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8008390:	4b07      	ldr	r3, [pc, #28]	@ (80083b0 <MX_CRC_Init+0x3c>)
 8008392:	2200      	movs	r2, #0
 8008394:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008396:	4b06      	ldr	r3, [pc, #24]	@ (80083b0 <MX_CRC_Init+0x3c>)
 8008398:	2201      	movs	r2, #1
 800839a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800839c:	4804      	ldr	r0, [pc, #16]	@ (80083b0 <MX_CRC_Init+0x3c>)
 800839e:	f000 fd8d 	bl	8008ebc <HAL_CRC_Init>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80083a8:	f000 f8e4 	bl	8008574 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80083ac:	bf00      	nop
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	200006b8 	.word	0x200006b8
 80083b4:	40023000 	.word	0x40023000

080083b8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80083bc:	4b0f      	ldr	r3, [pc, #60]	@ (80083fc <MX_TIM17_Init+0x44>)
 80083be:	4a10      	ldr	r2, [pc, #64]	@ (8008400 <MX_TIM17_Init+0x48>)
 80083c0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80083c2:	4b0e      	ldr	r3, [pc, #56]	@ (80083fc <MX_TIM17_Init+0x44>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083c8:	4b0c      	ldr	r3, [pc, #48]	@ (80083fc <MX_TIM17_Init+0x44>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80083ce:	4b0b      	ldr	r3, [pc, #44]	@ (80083fc <MX_TIM17_Init+0x44>)
 80083d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80083d4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083d6:	4b09      	ldr	r3, [pc, #36]	@ (80083fc <MX_TIM17_Init+0x44>)
 80083d8:	2200      	movs	r2, #0
 80083da:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80083dc:	4b07      	ldr	r3, [pc, #28]	@ (80083fc <MX_TIM17_Init+0x44>)
 80083de:	2200      	movs	r2, #0
 80083e0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083e2:	4b06      	ldr	r3, [pc, #24]	@ (80083fc <MX_TIM17_Init+0x44>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80083e8:	4804      	ldr	r0, [pc, #16]	@ (80083fc <MX_TIM17_Init+0x44>)
 80083ea:	f001 fe47 	bl	800a07c <HAL_TIM_Base_Init>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80083f4:	f000 f8be 	bl	8008574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80083f8:	bf00      	nop
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	200006dc 	.word	0x200006dc
 8008400:	40014800 	.word	0x40014800

08008404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800840a:	f107 030c 	add.w	r3, r7, #12
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	605a      	str	r2, [r3, #4]
 8008414:	609a      	str	r2, [r3, #8]
 8008416:	60da      	str	r2, [r3, #12]
 8008418:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800841a:	4b38      	ldr	r3, [pc, #224]	@ (80084fc <MX_GPIO_Init+0xf8>)
 800841c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800841e:	4a37      	ldr	r2, [pc, #220]	@ (80084fc <MX_GPIO_Init+0xf8>)
 8008420:	f043 0301 	orr.w	r3, r3, #1
 8008424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008426:	4b35      	ldr	r3, [pc, #212]	@ (80084fc <MX_GPIO_Init+0xf8>)
 8008428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	60bb      	str	r3, [r7, #8]
 8008430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008432:	4b32      	ldr	r3, [pc, #200]	@ (80084fc <MX_GPIO_Init+0xf8>)
 8008434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008436:	4a31      	ldr	r2, [pc, #196]	@ (80084fc <MX_GPIO_Init+0xf8>)
 8008438:	f043 0304 	orr.w	r3, r3, #4
 800843c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800843e:	4b2f      	ldr	r3, [pc, #188]	@ (80084fc <MX_GPIO_Init+0xf8>)
 8008440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008442:	f003 0304 	and.w	r3, r3, #4
 8008446:	607b      	str	r3, [r7, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800844a:	4b2c      	ldr	r3, [pc, #176]	@ (80084fc <MX_GPIO_Init+0xf8>)
 800844c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800844e:	4a2b      	ldr	r2, [pc, #172]	@ (80084fc <MX_GPIO_Init+0xf8>)
 8008450:	f043 0302 	orr.w	r3, r3, #2
 8008454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008456:	4b29      	ldr	r3, [pc, #164]	@ (80084fc <MX_GPIO_Init+0xf8>)
 8008458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8008462:	2200      	movs	r2, #0
 8008464:	2108      	movs	r1, #8
 8008466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800846a:	f000 ffc3 	bl	80093f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800846e:	2307      	movs	r3, #7
 8008470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8008472:	230b      	movs	r3, #11
 8008474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008476:	2300      	movs	r3, #0
 8008478:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800847a:	f107 030c 	add.w	r3, r7, #12
 800847e:	4619      	mov	r1, r3
 8008480:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008484:	f000 fe0c 	bl	80090a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8008488:	2308      	movs	r3, #8
 800848a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800848c:	2301      	movs	r3, #1
 800848e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008490:	2300      	movs	r3, #0
 8008492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008494:	2300      	movs	r3, #0
 8008496:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8008498:	f107 030c 	add.w	r3, r7, #12
 800849c:	4619      	mov	r1, r3
 800849e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80084a2:	f000 fdfd 	bl	80090a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_INT1_Pin DIG_INT2_Pin DIG_INT3_Pin DIG_INT4_Pin */
  GPIO_InitStruct.Pin = DIG_INT1_Pin|DIG_INT2_Pin|DIG_INT3_Pin|DIG_INT4_Pin;
 80084a6:	23f0      	movs	r3, #240	@ 0xf0
 80084a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084aa:	2300      	movs	r3, #0
 80084ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084b2:	f107 030c 	add.w	r3, r7, #12
 80084b6:	4619      	mov	r1, r3
 80084b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80084bc:	f000 fdf0 	bl	80090a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_INT5_Pin DIG_INT6_Pin */
  GPIO_InitStruct.Pin = DIG_INT5_Pin|DIG_INT6_Pin;
 80084c0:	2330      	movs	r3, #48	@ 0x30
 80084c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084c4:	2300      	movs	r3, #0
 80084c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084cc:	f107 030c 	add.w	r3, r7, #12
 80084d0:	4619      	mov	r1, r3
 80084d2:	480b      	ldr	r0, [pc, #44]	@ (8008500 <MX_GPIO_Init+0xfc>)
 80084d4:	f000 fde4 	bl	80090a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_INT7_Pin DIG_INT8_Pin DIG_INT9_Pin DIG_INT10_Pin
                           DIG_INT11_Pin DIG_INT12_Pin */
  GPIO_InitStruct.Pin = DIG_INT7_Pin|DIG_INT8_Pin|DIG_INT9_Pin|DIG_INT10_Pin
 80084d8:	f641 4307 	movw	r3, #7175	@ 0x1c07
 80084dc:	60fb      	str	r3, [r7, #12]
                          |DIG_INT11_Pin|DIG_INT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084de:	2300      	movs	r3, #0
 80084e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084e2:	2300      	movs	r3, #0
 80084e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084e6:	f107 030c 	add.w	r3, r7, #12
 80084ea:	4619      	mov	r1, r3
 80084ec:	4805      	ldr	r0, [pc, #20]	@ (8008504 <MX_GPIO_Init+0x100>)
 80084ee:	f000 fdd7 	bl	80090a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80084f2:	bf00      	nop
 80084f4:	3720      	adds	r7, #32
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	40021000 	.word	0x40021000
 8008500:	48000800 	.word	0x48000800
 8008504:	48000400 	.word	0x48000400

08008508 <config_can_filter>:
	/* Low level Can management ----------------------------------------------*/

}
/*---------------------------------------------------- HAL_CAN_RxCpltCallback */

void config_can_filter(void){
 8008508:	b580      	push	{r7, lr}
 800850a:	b08c      	sub	sp, #48	@ 0x30
 800850c:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;

  uint32_t filterMask= 0xFFFF88FF;
 800850e:	f46f 43ee 	mvn.w	r3, #30464	@ 0x7700
 8008512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t filterID=   0x18FF00E7; // Only accept ECU CAN message ID
 8008514:	4b15      	ldr	r3, [pc, #84]	@ (800856c <config_can_filter+0x64>)
 8008516:	62bb      	str	r3, [r7, #40]	@ 0x28

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8008518:	2300      	movs	r3, #0
 800851a:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800851c:	2301      	movs	r3, #1
 800851e:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = filterID >> 13;
 8008520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008522:	0b5b      	lsrs	r3, r3, #13
 8008524:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = (0x00FF & (filterID << 3)) | (1 << 2);;
 8008526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	b2db      	uxtb	r3, r3
 800852c:	f043 0304 	orr.w	r3, r3, #4
 8008530:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 8008532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008534:	0b5b      	lsrs	r3, r3, #13
 8008536:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = (0x00FF & (filterMask << 3)) | (1 << 2);
 8008538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853a:	00db      	lsls	r3, r3, #3
 800853c:	b2db      	uxtb	r3, r3
 800853e:	f043 0304 	orr.w	r3, r3, #4
 8008542:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8008548:	2301      	movs	r3, #1
 800854a:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterBank = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	617b      	str	r3, [r7, #20]
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8008550:	463b      	mov	r3, r7
 8008552:	4619      	mov	r1, r3
 8008554:	4806      	ldr	r0, [pc, #24]	@ (8008570 <config_can_filter+0x68>)
 8008556:	f000 fa96 	bl	8008a86 <HAL_CAN_ConfigFilter>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <config_can_filter+0x5c>
  {
    Error_Handler();
 8008560:	f000 f808 	bl	8008574 <Error_Handler>
  }
}
 8008564:	bf00      	nop
 8008566:	3730      	adds	r7, #48	@ 0x30
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	18ff00e7 	.word	0x18ff00e7
 8008570:	20000690 	.word	0x20000690

08008574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008578:	b672      	cpsid	i
}
 800857a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800857c:	bf00      	nop
 800857e:	e7fd      	b.n	800857c <Error_Handler+0x8>

08008580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008586:	4b0f      	ldr	r3, [pc, #60]	@ (80085c4 <HAL_MspInit+0x44>)
 8008588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800858a:	4a0e      	ldr	r2, [pc, #56]	@ (80085c4 <HAL_MspInit+0x44>)
 800858c:	f043 0301 	orr.w	r3, r3, #1
 8008590:	6613      	str	r3, [r2, #96]	@ 0x60
 8008592:	4b0c      	ldr	r3, [pc, #48]	@ (80085c4 <HAL_MspInit+0x44>)
 8008594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	607b      	str	r3, [r7, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800859e:	4b09      	ldr	r3, [pc, #36]	@ (80085c4 <HAL_MspInit+0x44>)
 80085a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085a2:	4a08      	ldr	r2, [pc, #32]	@ (80085c4 <HAL_MspInit+0x44>)
 80085a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80085aa:	4b06      	ldr	r3, [pc, #24]	@ (80085c4 <HAL_MspInit+0x44>)
 80085ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80085b6:	bf00      	nop
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	40021000 	.word	0x40021000

080085c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08a      	sub	sp, #40	@ 0x28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085d0:	f107 0314 	add.w	r3, r7, #20
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	605a      	str	r2, [r3, #4]
 80085da:	609a      	str	r2, [r3, #8]
 80085dc:	60da      	str	r2, [r3, #12]
 80085de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a17      	ldr	r2, [pc, #92]	@ (8008644 <HAL_CAN_MspInit+0x7c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d128      	bne.n	800863c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80085ea:	4b17      	ldr	r3, [pc, #92]	@ (8008648 <HAL_CAN_MspInit+0x80>)
 80085ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ee:	4a16      	ldr	r2, [pc, #88]	@ (8008648 <HAL_CAN_MspInit+0x80>)
 80085f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80085f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80085f6:	4b14      	ldr	r3, [pc, #80]	@ (8008648 <HAL_CAN_MspInit+0x80>)
 80085f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085fe:	613b      	str	r3, [r7, #16]
 8008600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008602:	4b11      	ldr	r3, [pc, #68]	@ (8008648 <HAL_CAN_MspInit+0x80>)
 8008604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008606:	4a10      	ldr	r2, [pc, #64]	@ (8008648 <HAL_CAN_MspInit+0x80>)
 8008608:	f043 0302 	orr.w	r3, r3, #2
 800860c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800860e:	4b0e      	ldr	r3, [pc, #56]	@ (8008648 <HAL_CAN_MspInit+0x80>)
 8008610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800861a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800861e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008620:	2302      	movs	r3, #2
 8008622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008624:	2300      	movs	r3, #0
 8008626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008628:	2303      	movs	r3, #3
 800862a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800862c:	2309      	movs	r3, #9
 800862e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008630:	f107 0314 	add.w	r3, r7, #20
 8008634:	4619      	mov	r1, r3
 8008636:	4805      	ldr	r0, [pc, #20]	@ (800864c <HAL_CAN_MspInit+0x84>)
 8008638:	f000 fd32 	bl	80090a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800863c:	bf00      	nop
 800863e:	3728      	adds	r7, #40	@ 0x28
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	40006400 	.word	0x40006400
 8008648:	40021000 	.word	0x40021000
 800864c:	48000400 	.word	0x48000400

08008650 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a0a      	ldr	r2, [pc, #40]	@ (8008688 <HAL_CRC_MspInit+0x38>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d10b      	bne.n	800867a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008662:	4b0a      	ldr	r3, [pc, #40]	@ (800868c <HAL_CRC_MspInit+0x3c>)
 8008664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008666:	4a09      	ldr	r2, [pc, #36]	@ (800868c <HAL_CRC_MspInit+0x3c>)
 8008668:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800866c:	6493      	str	r3, [r2, #72]	@ 0x48
 800866e:	4b07      	ldr	r3, [pc, #28]	@ (800868c <HAL_CRC_MspInit+0x3c>)
 8008670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008672:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800867a:	bf00      	nop
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	40023000 	.word	0x40023000
 800868c:	40021000 	.word	0x40021000

08008690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a0a      	ldr	r2, [pc, #40]	@ (80086c8 <HAL_TIM_Base_MspInit+0x38>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d10b      	bne.n	80086ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80086a2:	4b0a      	ldr	r3, [pc, #40]	@ (80086cc <HAL_TIM_Base_MspInit+0x3c>)
 80086a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086a6:	4a09      	ldr	r2, [pc, #36]	@ (80086cc <HAL_TIM_Base_MspInit+0x3c>)
 80086a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80086ae:	4b07      	ldr	r3, [pc, #28]	@ (80086cc <HAL_TIM_Base_MspInit+0x3c>)
 80086b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80086ba:	bf00      	nop
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	40014800 	.word	0x40014800
 80086cc:	40021000 	.word	0x40021000

080086d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80086d4:	bf00      	nop
 80086d6:	e7fd      	b.n	80086d4 <NMI_Handler+0x4>

080086d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80086d8:	b480      	push	{r7}
 80086da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80086dc:	bf00      	nop
 80086de:	e7fd      	b.n	80086dc <HardFault_Handler+0x4>

080086e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80086e0:	b480      	push	{r7}
 80086e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80086e4:	bf00      	nop
 80086e6:	e7fd      	b.n	80086e4 <MemManage_Handler+0x4>

080086e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086e8:	b480      	push	{r7}
 80086ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80086ec:	bf00      	nop
 80086ee:	e7fd      	b.n	80086ec <BusFault_Handler+0x4>

080086f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086f0:	b480      	push	{r7}
 80086f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80086f4:	bf00      	nop
 80086f6:	e7fd      	b.n	80086f4 <UsageFault_Handler+0x4>

080086f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80086fc:	bf00      	nop
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008706:	b480      	push	{r7}
 8008708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800870a:	bf00      	nop
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008718:	bf00      	nop
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008726:	f000 f893 	bl	8008850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800872a:	bf00      	nop
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008734:	4b06      	ldr	r3, [pc, #24]	@ (8008750 <SystemInit+0x20>)
 8008736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800873a:	4a05      	ldr	r2, [pc, #20]	@ (8008750 <SystemInit+0x20>)
 800873c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008740:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8008744:	bf00      	nop
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	e000ed00 	.word	0xe000ed00

08008754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008754:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800878c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008758:	f7ff ffea 	bl	8008730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800875c:	480c      	ldr	r0, [pc, #48]	@ (8008790 <LoopForever+0x6>)
  ldr r1, =_edata
 800875e:	490d      	ldr	r1, [pc, #52]	@ (8008794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008760:	4a0d      	ldr	r2, [pc, #52]	@ (8008798 <LoopForever+0xe>)
  movs r3, #0
 8008762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008764:	e002      	b.n	800876c <LoopCopyDataInit>

08008766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800876a:	3304      	adds	r3, #4

0800876c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800876c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800876e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008770:	d3f9      	bcc.n	8008766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008772:	4a0a      	ldr	r2, [pc, #40]	@ (800879c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008774:	4c0a      	ldr	r4, [pc, #40]	@ (80087a0 <LoopForever+0x16>)
  movs r3, #0
 8008776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008778:	e001      	b.n	800877e <LoopFillZerobss>

0800877a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800877a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800877c:	3204      	adds	r2, #4

0800877e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800877e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008780:	d3fb      	bcc.n	800877a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008782:	f001 fde5 	bl	800a350 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008786:	f7ff fd55 	bl	8008234 <main>

0800878a <LoopForever>:

LoopForever:
    b LoopForever
 800878a:	e7fe      	b.n	800878a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800878c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8008790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008794:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8008798:	0800a3f8 	.word	0x0800a3f8
  ldr r2, =_sbss
 800879c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80087a0:	2000072c 	.word	0x2000072c

080087a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80087a4:	e7fe      	b.n	80087a4 <ADC1_2_IRQHandler>

080087a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087b0:	2003      	movs	r0, #3
 80087b2:	f000 fb4f 	bl	8008e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80087b6:	200f      	movs	r0, #15
 80087b8:	f000 f80e 	bl	80087d8 <HAL_InitTick>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d002      	beq.n	80087c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	71fb      	strb	r3, [r7, #7]
 80087c6:	e001      	b.n	80087cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80087c8:	f7ff feda 	bl	8008580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80087cc:	79fb      	ldrb	r3, [r7, #7]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80087e4:	4b17      	ldr	r3, [pc, #92]	@ (8008844 <HAL_InitTick+0x6c>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d023      	beq.n	8008834 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80087ec:	4b16      	ldr	r3, [pc, #88]	@ (8008848 <HAL_InitTick+0x70>)
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	4b14      	ldr	r3, [pc, #80]	@ (8008844 <HAL_InitTick+0x6c>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	4619      	mov	r1, r3
 80087f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80087fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80087fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fb4d 	bl	8008ea2 <HAL_SYSTICK_Config>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10f      	bne.n	800882e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b0f      	cmp	r3, #15
 8008812:	d809      	bhi.n	8008828 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008814:	2200      	movs	r2, #0
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	f04f 30ff 	mov.w	r0, #4294967295
 800881c:	f000 fb25 	bl	8008e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008820:	4a0a      	ldr	r2, [pc, #40]	@ (800884c <HAL_InitTick+0x74>)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	e007      	b.n	8008838 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	73fb      	strb	r3, [r7, #15]
 800882c:	e004      	b.n	8008838 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	73fb      	strb	r3, [r7, #15]
 8008832:	e001      	b.n	8008838 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	20000008 	.word	0x20000008
 8008848:	20000000 	.word	0x20000000
 800884c:	20000004 	.word	0x20000004

08008850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008854:	4b06      	ldr	r3, [pc, #24]	@ (8008870 <HAL_IncTick+0x20>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	461a      	mov	r2, r3
 800885a:	4b06      	ldr	r3, [pc, #24]	@ (8008874 <HAL_IncTick+0x24>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4413      	add	r3, r2
 8008860:	4a04      	ldr	r2, [pc, #16]	@ (8008874 <HAL_IncTick+0x24>)
 8008862:	6013      	str	r3, [r2, #0]
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	20000008 	.word	0x20000008
 8008874:	20000728 	.word	0x20000728

08008878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
  return uwTick;
 800887c:	4b03      	ldr	r3, [pc, #12]	@ (800888c <HAL_GetTick+0x14>)
 800887e:	681b      	ldr	r3, [r3, #0]
}
 8008880:	4618      	mov	r0, r3
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	20000728 	.word	0x20000728

08008890 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e0ed      	b.n	8008a7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d102      	bne.n	80088b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7ff fe8a 	bl	80085c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f042 0201 	orr.w	r2, r2, #1
 80088c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088c4:	f7ff ffd8 	bl	8008878 <HAL_GetTick>
 80088c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088ca:	e012      	b.n	80088f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088cc:	f7ff ffd4 	bl	8008878 <HAL_GetTick>
 80088d0:	4602      	mov	r2, r0
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	2b0a      	cmp	r3, #10
 80088d8:	d90b      	bls.n	80088f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2205      	movs	r2, #5
 80088ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e0c5      	b.n	8008a7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f003 0301 	and.w	r3, r3, #1
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0e5      	beq.n	80088cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 0202 	bic.w	r2, r2, #2
 800890e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008910:	f7ff ffb2 	bl	8008878 <HAL_GetTick>
 8008914:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008916:	e012      	b.n	800893e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008918:	f7ff ffae 	bl	8008878 <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	2b0a      	cmp	r3, #10
 8008924:	d90b      	bls.n	800893e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800892a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2205      	movs	r2, #5
 8008936:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e09f      	b.n	8008a7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e5      	bne.n	8008918 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7e1b      	ldrb	r3, [r3, #24]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d108      	bne.n	8008966 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	e007      	b.n	8008976 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008974:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	7e5b      	ldrb	r3, [r3, #25]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d108      	bne.n	8008990 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	e007      	b.n	80089a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800899e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	7e9b      	ldrb	r3, [r3, #26]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d108      	bne.n	80089ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0220 	orr.w	r2, r2, #32
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	e007      	b.n	80089ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 0220 	bic.w	r2, r2, #32
 80089c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	7edb      	ldrb	r3, [r3, #27]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d108      	bne.n	80089e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0210 	bic.w	r2, r2, #16
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	e007      	b.n	80089f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0210 	orr.w	r2, r2, #16
 80089f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	7f1b      	ldrb	r3, [r3, #28]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d108      	bne.n	8008a0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f042 0208 	orr.w	r2, r2, #8
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	e007      	b.n	8008a1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f022 0208 	bic.w	r2, r2, #8
 8008a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	7f5b      	ldrb	r3, [r3, #29]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d108      	bne.n	8008a38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f042 0204 	orr.w	r2, r2, #4
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	e007      	b.n	8008a48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f022 0204 	bic.w	r2, r2, #4
 8008a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	431a      	orrs	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	ea42 0103 	orr.w	r1, r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	1e5a      	subs	r2, r3, #1
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b087      	sub	sp, #28
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a9c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008a9e:	7cfb      	ldrb	r3, [r7, #19]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d003      	beq.n	8008aac <HAL_CAN_ConfigFilter+0x26>
 8008aa4:	7cfb      	ldrb	r3, [r7, #19]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	f040 80aa 	bne.w	8008c00 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008ab2:	f043 0201 	orr.w	r2, r3, #1
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	f003 031f 	and.w	r3, r3, #31
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	43db      	mvns	r3, r3
 8008ad6:	401a      	ands	r2, r3
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d123      	bne.n	8008b2e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	43db      	mvns	r3, r3
 8008af0:	401a      	ands	r2, r3
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008b08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	3248      	adds	r2, #72	@ 0x48
 8008b0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008b22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008b24:	6979      	ldr	r1, [r7, #20]
 8008b26:	3348      	adds	r3, #72	@ 0x48
 8008b28:	00db      	lsls	r3, r3, #3
 8008b2a:	440b      	add	r3, r1
 8008b2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d122      	bne.n	8008b7c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008b56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	3248      	adds	r2, #72	@ 0x48
 8008b5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008b70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008b72:	6979      	ldr	r1, [r7, #20]
 8008b74:	3348      	adds	r3, #72	@ 0x48
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	440b      	add	r3, r1
 8008b7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d109      	bne.n	8008b98 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	43db      	mvns	r3, r3
 8008b8e:	401a      	ands	r2, r3
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8008b96:	e007      	b.n	8008ba8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d109      	bne.n	8008bc4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	43db      	mvns	r3, r3
 8008bba:	401a      	ands	r2, r3
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8008bc2:	e007      	b.n	8008bd4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	431a      	orrs	r2, r3
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d107      	bne.n	8008bec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	431a      	orrs	r2, r3
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008bf2:	f023 0201 	bic.w	r2, r3, #1
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e006      	b.n	8008c0e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
  }
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d12e      	bne.n	8008c8c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2202      	movs	r2, #2
 8008c32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f022 0201 	bic.w	r2, r2, #1
 8008c44:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c46:	f7ff fe17 	bl	8008878 <HAL_GetTick>
 8008c4a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008c4c:	e012      	b.n	8008c74 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008c4e:	f7ff fe13 	bl	8008878 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	2b0a      	cmp	r3, #10
 8008c5a:	d90b      	bls.n	8008c74 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c60:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2205      	movs	r2, #5
 8008c6c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e012      	b.n	8008c9a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1e5      	bne.n	8008c4e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e006      	b.n	8008c9a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c90:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
  }
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b085      	sub	sp, #20
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008cb2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d002      	beq.n	8008cc0 <HAL_CAN_ActivateNotification+0x1e>
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d109      	bne.n	8008cd4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6959      	ldr	r1, [r3, #20]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	e006      	b.n	8008ce2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cd8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
  }
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
	...

08008cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f003 0307 	and.w	r3, r3, #7
 8008cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d00:	4b0c      	ldr	r3, [pc, #48]	@ (8008d34 <__NVIC_SetPriorityGrouping+0x44>)
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008d22:	4a04      	ldr	r2, [pc, #16]	@ (8008d34 <__NVIC_SetPriorityGrouping+0x44>)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	60d3      	str	r3, [r2, #12]
}
 8008d28:	bf00      	nop
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	e000ed00 	.word	0xe000ed00

08008d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d3c:	4b04      	ldr	r3, [pc, #16]	@ (8008d50 <__NVIC_GetPriorityGrouping+0x18>)
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	0a1b      	lsrs	r3, r3, #8
 8008d42:	f003 0307 	and.w	r3, r3, #7
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	e000ed00 	.word	0xe000ed00

08008d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	6039      	str	r1, [r7, #0]
 8008d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	db0a      	blt.n	8008d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	490c      	ldr	r1, [pc, #48]	@ (8008da0 <__NVIC_SetPriority+0x4c>)
 8008d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d72:	0112      	lsls	r2, r2, #4
 8008d74:	b2d2      	uxtb	r2, r2
 8008d76:	440b      	add	r3, r1
 8008d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d7c:	e00a      	b.n	8008d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	4908      	ldr	r1, [pc, #32]	@ (8008da4 <__NVIC_SetPriority+0x50>)
 8008d84:	79fb      	ldrb	r3, [r7, #7]
 8008d86:	f003 030f 	and.w	r3, r3, #15
 8008d8a:	3b04      	subs	r3, #4
 8008d8c:	0112      	lsls	r2, r2, #4
 8008d8e:	b2d2      	uxtb	r2, r2
 8008d90:	440b      	add	r3, r1
 8008d92:	761a      	strb	r2, [r3, #24]
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	e000e100 	.word	0xe000e100
 8008da4:	e000ed00 	.word	0xe000ed00

08008da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b089      	sub	sp, #36	@ 0x24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	f1c3 0307 	rsb	r3, r3, #7
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	bf28      	it	cs
 8008dc6:	2304      	movcs	r3, #4
 8008dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	2b06      	cmp	r3, #6
 8008dd0:	d902      	bls.n	8008dd8 <NVIC_EncodePriority+0x30>
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	3b03      	subs	r3, #3
 8008dd6:	e000      	b.n	8008dda <NVIC_EncodePriority+0x32>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	fa02 f303 	lsl.w	r3, r2, r3
 8008de6:	43da      	mvns	r2, r3
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	401a      	ands	r2, r3
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008df0:	f04f 31ff 	mov.w	r1, #4294967295
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dfa:	43d9      	mvns	r1, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e00:	4313      	orrs	r3, r2
         );
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3724      	adds	r7, #36	@ 0x24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
	...

08008e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e20:	d301      	bcc.n	8008e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e22:	2301      	movs	r3, #1
 8008e24:	e00f      	b.n	8008e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e26:	4a0a      	ldr	r2, [pc, #40]	@ (8008e50 <SysTick_Config+0x40>)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e2e:	210f      	movs	r1, #15
 8008e30:	f04f 30ff 	mov.w	r0, #4294967295
 8008e34:	f7ff ff8e 	bl	8008d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e38:	4b05      	ldr	r3, [pc, #20]	@ (8008e50 <SysTick_Config+0x40>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e3e:	4b04      	ldr	r3, [pc, #16]	@ (8008e50 <SysTick_Config+0x40>)
 8008e40:	2207      	movs	r2, #7
 8008e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	e000e010 	.word	0xe000e010

08008e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff ff47 	bl	8008cf0 <__NVIC_SetPriorityGrouping>
}
 8008e62:	bf00      	nop
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b086      	sub	sp, #24
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	4603      	mov	r3, r0
 8008e72:	60b9      	str	r1, [r7, #8]
 8008e74:	607a      	str	r2, [r7, #4]
 8008e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008e7c:	f7ff ff5c 	bl	8008d38 <__NVIC_GetPriorityGrouping>
 8008e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	68b9      	ldr	r1, [r7, #8]
 8008e86:	6978      	ldr	r0, [r7, #20]
 8008e88:	f7ff ff8e 	bl	8008da8 <NVIC_EncodePriority>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e92:	4611      	mov	r1, r2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff ff5d 	bl	8008d54 <__NVIC_SetPriority>
}
 8008e9a:	bf00      	nop
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff ffb0 	bl	8008e10 <SysTick_Config>
 8008eb0:	4603      	mov	r3, r0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
	...

08008ebc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e054      	b.n	8008f78 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	7f5b      	ldrb	r3, [r3, #29]
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d105      	bne.n	8008ee4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7ff fbb6 	bl	8008650 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	791b      	ldrb	r3, [r3, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10c      	bne.n	8008f0c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a22      	ldr	r2, [pc, #136]	@ (8008f80 <HAL_CRC_Init+0xc4>)
 8008ef8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	689a      	ldr	r2, [r3, #8]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f022 0218 	bic.w	r2, r2, #24
 8008f08:	609a      	str	r2, [r3, #8]
 8008f0a:	e00c      	b.n	8008f26 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6899      	ldr	r1, [r3, #8]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	461a      	mov	r2, r3
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f834 	bl	8008f84 <HAL_CRCEx_Polynomial_Set>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e028      	b.n	8008f78 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	795b      	ldrb	r3, [r3, #5]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d105      	bne.n	8008f3a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f04f 32ff 	mov.w	r2, #4294967295
 8008f36:	611a      	str	r2, [r3, #16]
 8008f38:	e004      	b.n	8008f44 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	6912      	ldr	r2, [r2, #16]
 8008f42:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	695a      	ldr	r2, [r3, #20]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	430a      	orrs	r2, r1
 8008f58:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	699a      	ldr	r2, [r3, #24]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	04c11db7 	.word	0x04c11db7

08008f84 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b087      	sub	sp, #28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008f94:	231f      	movs	r3, #31
 8008f96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d102      	bne.n	8008fa8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	75fb      	strb	r3, [r7, #23]
 8008fa6:	e063      	b.n	8009070 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008fa8:	bf00      	nop
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	1e5a      	subs	r2, r3, #1
 8008fae:	613a      	str	r2, [r7, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d009      	beq.n	8008fc8 <HAL_CRCEx_Polynomial_Set+0x44>
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f003 031f 	and.w	r3, r3, #31
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0f0      	beq.n	8008faa <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b18      	cmp	r3, #24
 8008fcc:	d846      	bhi.n	800905c <HAL_CRCEx_Polynomial_Set+0xd8>
 8008fce:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd4 <HAL_CRCEx_Polynomial_Set+0x50>)
 8008fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd4:	08009063 	.word	0x08009063
 8008fd8:	0800905d 	.word	0x0800905d
 8008fdc:	0800905d 	.word	0x0800905d
 8008fe0:	0800905d 	.word	0x0800905d
 8008fe4:	0800905d 	.word	0x0800905d
 8008fe8:	0800905d 	.word	0x0800905d
 8008fec:	0800905d 	.word	0x0800905d
 8008ff0:	0800905d 	.word	0x0800905d
 8008ff4:	08009051 	.word	0x08009051
 8008ff8:	0800905d 	.word	0x0800905d
 8008ffc:	0800905d 	.word	0x0800905d
 8009000:	0800905d 	.word	0x0800905d
 8009004:	0800905d 	.word	0x0800905d
 8009008:	0800905d 	.word	0x0800905d
 800900c:	0800905d 	.word	0x0800905d
 8009010:	0800905d 	.word	0x0800905d
 8009014:	08009045 	.word	0x08009045
 8009018:	0800905d 	.word	0x0800905d
 800901c:	0800905d 	.word	0x0800905d
 8009020:	0800905d 	.word	0x0800905d
 8009024:	0800905d 	.word	0x0800905d
 8009028:	0800905d 	.word	0x0800905d
 800902c:	0800905d 	.word	0x0800905d
 8009030:	0800905d 	.word	0x0800905d
 8009034:	08009039 	.word	0x08009039
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	2b06      	cmp	r3, #6
 800903c:	d913      	bls.n	8009066 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009042:	e010      	b.n	8009066 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	2b07      	cmp	r3, #7
 8009048:	d90f      	bls.n	800906a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800904e:	e00c      	b.n	800906a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	2b0f      	cmp	r3, #15
 8009054:	d90b      	bls.n	800906e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800905a:	e008      	b.n	800906e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	75fb      	strb	r3, [r7, #23]
        break;
 8009060:	e006      	b.n	8009070 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009062:	bf00      	nop
 8009064:	e004      	b.n	8009070 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009066:	bf00      	nop
 8009068:	e002      	b.n	8009070 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800906a:	bf00      	nop
 800906c:	e000      	b.n	8009070 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800906e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8009070:	7dfb      	ldrb	r3, [r7, #23]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10d      	bne.n	8009092 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f023 0118 	bic.w	r1, r3, #24
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	430a      	orrs	r2, r1
 8009090:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009092:	7dfb      	ldrb	r3, [r7, #23]
}
 8009094:	4618      	mov	r0, r3
 8009096:	371c      	adds	r7, #28
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80090aa:	2300      	movs	r3, #0
 80090ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80090ae:	e17f      	b.n	80093b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	2101      	movs	r1, #1
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	fa01 f303 	lsl.w	r3, r1, r3
 80090bc:	4013      	ands	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 8171 	beq.w	80093aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	f003 0303 	and.w	r3, r3, #3
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d005      	beq.n	80090e0 <HAL_GPIO_Init+0x40>
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	f003 0303 	and.w	r3, r3, #3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d130      	bne.n	8009142 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	2203      	movs	r2, #3
 80090ec:	fa02 f303 	lsl.w	r3, r2, r3
 80090f0:	43db      	mvns	r3, r3
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	4013      	ands	r3, r2
 80090f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	68da      	ldr	r2, [r3, #12]
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	fa02 f303 	lsl.w	r3, r2, r3
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	4313      	orrs	r3, r2
 8009108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009116:	2201      	movs	r2, #1
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	fa02 f303 	lsl.w	r3, r2, r3
 800911e:	43db      	mvns	r3, r3
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	4013      	ands	r3, r2
 8009124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	091b      	lsrs	r3, r3, #4
 800912c:	f003 0201 	and.w	r2, r3, #1
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	fa02 f303 	lsl.w	r3, r2, r3
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	4313      	orrs	r3, r2
 800913a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	2b03      	cmp	r3, #3
 800914c:	d118      	bne.n	8009180 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8009154:	2201      	movs	r2, #1
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	fa02 f303 	lsl.w	r3, r2, r3
 800915c:	43db      	mvns	r3, r3
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	4013      	ands	r3, r2
 8009162:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	08db      	lsrs	r3, r3, #3
 800916a:	f003 0201 	and.w	r2, r3, #1
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	fa02 f303 	lsl.w	r3, r2, r3
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f003 0303 	and.w	r3, r3, #3
 8009188:	2b03      	cmp	r3, #3
 800918a:	d017      	beq.n	80091bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	005b      	lsls	r3, r3, #1
 8009196:	2203      	movs	r2, #3
 8009198:	fa02 f303 	lsl.w	r3, r2, r3
 800919c:	43db      	mvns	r3, r3
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	4013      	ands	r3, r2
 80091a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	fa02 f303 	lsl.w	r3, r2, r3
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f003 0303 	and.w	r3, r3, #3
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d123      	bne.n	8009210 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	08da      	lsrs	r2, r3, #3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	3208      	adds	r2, #8
 80091d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f003 0307 	and.w	r3, r3, #7
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	220f      	movs	r2, #15
 80091e0:	fa02 f303 	lsl.w	r3, r2, r3
 80091e4:	43db      	mvns	r3, r3
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	4013      	ands	r3, r2
 80091ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	691a      	ldr	r2, [r3, #16]
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f003 0307 	and.w	r3, r3, #7
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	fa02 f303 	lsl.w	r3, r2, r3
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	4313      	orrs	r3, r2
 8009200:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	08da      	lsrs	r2, r3, #3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	3208      	adds	r2, #8
 800920a:	6939      	ldr	r1, [r7, #16]
 800920c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	2203      	movs	r2, #3
 800921c:	fa02 f303 	lsl.w	r3, r2, r3
 8009220:	43db      	mvns	r3, r3
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	4013      	ands	r3, r2
 8009226:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	f003 0203 	and.w	r2, r3, #3
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	fa02 f303 	lsl.w	r3, r2, r3
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	4313      	orrs	r3, r2
 800923c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 80ac 	beq.w	80093aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009252:	4b5f      	ldr	r3, [pc, #380]	@ (80093d0 <HAL_GPIO_Init+0x330>)
 8009254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009256:	4a5e      	ldr	r2, [pc, #376]	@ (80093d0 <HAL_GPIO_Init+0x330>)
 8009258:	f043 0301 	orr.w	r3, r3, #1
 800925c:	6613      	str	r3, [r2, #96]	@ 0x60
 800925e:	4b5c      	ldr	r3, [pc, #368]	@ (80093d0 <HAL_GPIO_Init+0x330>)
 8009260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	60bb      	str	r3, [r7, #8]
 8009268:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800926a:	4a5a      	ldr	r2, [pc, #360]	@ (80093d4 <HAL_GPIO_Init+0x334>)
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	089b      	lsrs	r3, r3, #2
 8009270:	3302      	adds	r3, #2
 8009272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009276:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f003 0303 	and.w	r3, r3, #3
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	220f      	movs	r2, #15
 8009282:	fa02 f303 	lsl.w	r3, r2, r3
 8009286:	43db      	mvns	r3, r3
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	4013      	ands	r3, r2
 800928c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009294:	d025      	beq.n	80092e2 <HAL_GPIO_Init+0x242>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a4f      	ldr	r2, [pc, #316]	@ (80093d8 <HAL_GPIO_Init+0x338>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d01f      	beq.n	80092de <HAL_GPIO_Init+0x23e>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a4e      	ldr	r2, [pc, #312]	@ (80093dc <HAL_GPIO_Init+0x33c>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d019      	beq.n	80092da <HAL_GPIO_Init+0x23a>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a4d      	ldr	r2, [pc, #308]	@ (80093e0 <HAL_GPIO_Init+0x340>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d013      	beq.n	80092d6 <HAL_GPIO_Init+0x236>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a4c      	ldr	r2, [pc, #304]	@ (80093e4 <HAL_GPIO_Init+0x344>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d00d      	beq.n	80092d2 <HAL_GPIO_Init+0x232>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a4b      	ldr	r2, [pc, #300]	@ (80093e8 <HAL_GPIO_Init+0x348>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d007      	beq.n	80092ce <HAL_GPIO_Init+0x22e>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a4a      	ldr	r2, [pc, #296]	@ (80093ec <HAL_GPIO_Init+0x34c>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d101      	bne.n	80092ca <HAL_GPIO_Init+0x22a>
 80092c6:	2306      	movs	r3, #6
 80092c8:	e00c      	b.n	80092e4 <HAL_GPIO_Init+0x244>
 80092ca:	2307      	movs	r3, #7
 80092cc:	e00a      	b.n	80092e4 <HAL_GPIO_Init+0x244>
 80092ce:	2305      	movs	r3, #5
 80092d0:	e008      	b.n	80092e4 <HAL_GPIO_Init+0x244>
 80092d2:	2304      	movs	r3, #4
 80092d4:	e006      	b.n	80092e4 <HAL_GPIO_Init+0x244>
 80092d6:	2303      	movs	r3, #3
 80092d8:	e004      	b.n	80092e4 <HAL_GPIO_Init+0x244>
 80092da:	2302      	movs	r3, #2
 80092dc:	e002      	b.n	80092e4 <HAL_GPIO_Init+0x244>
 80092de:	2301      	movs	r3, #1
 80092e0:	e000      	b.n	80092e4 <HAL_GPIO_Init+0x244>
 80092e2:	2300      	movs	r3, #0
 80092e4:	697a      	ldr	r2, [r7, #20]
 80092e6:	f002 0203 	and.w	r2, r2, #3
 80092ea:	0092      	lsls	r2, r2, #2
 80092ec:	4093      	lsls	r3, r2
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80092f4:	4937      	ldr	r1, [pc, #220]	@ (80093d4 <HAL_GPIO_Init+0x334>)
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	089b      	lsrs	r3, r3, #2
 80092fa:	3302      	adds	r3, #2
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009302:	4b3b      	ldr	r3, [pc, #236]	@ (80093f0 <HAL_GPIO_Init+0x350>)
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	43db      	mvns	r3, r3
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	4013      	ands	r3, r2
 8009310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4313      	orrs	r3, r2
 8009324:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009326:	4a32      	ldr	r2, [pc, #200]	@ (80093f0 <HAL_GPIO_Init+0x350>)
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800932c:	4b30      	ldr	r3, [pc, #192]	@ (80093f0 <HAL_GPIO_Init+0x350>)
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	43db      	mvns	r3, r3
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	4013      	ands	r3, r2
 800933a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	4313      	orrs	r3, r2
 800934e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009350:	4a27      	ldr	r2, [pc, #156]	@ (80093f0 <HAL_GPIO_Init+0x350>)
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009356:	4b26      	ldr	r3, [pc, #152]	@ (80093f0 <HAL_GPIO_Init+0x350>)
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	43db      	mvns	r3, r3
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	4013      	ands	r3, r2
 8009364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4313      	orrs	r3, r2
 8009378:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800937a:	4a1d      	ldr	r2, [pc, #116]	@ (80093f0 <HAL_GPIO_Init+0x350>)
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8009380:	4b1b      	ldr	r3, [pc, #108]	@ (80093f0 <HAL_GPIO_Init+0x350>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	43db      	mvns	r3, r3
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	4013      	ands	r3, r2
 800938e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80093a4:	4a12      	ldr	r2, [pc, #72]	@ (80093f0 <HAL_GPIO_Init+0x350>)
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	3301      	adds	r3, #1
 80093ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	fa22 f303 	lsr.w	r3, r2, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f47f ae78 	bne.w	80090b0 <HAL_GPIO_Init+0x10>
  }
}
 80093c0:	bf00      	nop
 80093c2:	bf00      	nop
 80093c4:	371c      	adds	r7, #28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	40021000 	.word	0x40021000
 80093d4:	40010000 	.word	0x40010000
 80093d8:	48000400 	.word	0x48000400
 80093dc:	48000800 	.word	0x48000800
 80093e0:	48000c00 	.word	0x48000c00
 80093e4:	48001000 	.word	0x48001000
 80093e8:	48001400 	.word	0x48001400
 80093ec:	48001800 	.word	0x48001800
 80093f0:	40010400 	.word	0x40010400

080093f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	807b      	strh	r3, [r7, #2]
 8009400:	4613      	mov	r3, r2
 8009402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009404:	787b      	ldrb	r3, [r7, #1]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800940a:	887a      	ldrh	r2, [r7, #2]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009410:	e002      	b.n	8009418 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009412:	887a      	ldrh	r2, [r7, #2]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009424:	b480      	push	{r7}
 8009426:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009428:	4b04      	ldr	r3, [pc, #16]	@ (800943c <HAL_PWREx_GetVoltageRange+0x18>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8009430:	4618      	mov	r0, r3
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	40007000 	.word	0x40007000

08009440 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800944e:	d130      	bne.n	80094b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009450:	4b23      	ldr	r3, [pc, #140]	@ (80094e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800945c:	d038      	beq.n	80094d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800945e:	4b20      	ldr	r3, [pc, #128]	@ (80094e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009466:	4a1e      	ldr	r2, [pc, #120]	@ (80094e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009468:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800946c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800946e:	4b1d      	ldr	r3, [pc, #116]	@ (80094e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2232      	movs	r2, #50	@ 0x32
 8009474:	fb02 f303 	mul.w	r3, r2, r3
 8009478:	4a1b      	ldr	r2, [pc, #108]	@ (80094e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800947a:	fba2 2303 	umull	r2, r3, r2, r3
 800947e:	0c9b      	lsrs	r3, r3, #18
 8009480:	3301      	adds	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009484:	e002      	b.n	800948c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3b01      	subs	r3, #1
 800948a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800948c:	4b14      	ldr	r3, [pc, #80]	@ (80094e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009498:	d102      	bne.n	80094a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1f2      	bne.n	8009486 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80094a0:	4b0f      	ldr	r3, [pc, #60]	@ (80094e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094ac:	d110      	bne.n	80094d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e00f      	b.n	80094d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80094b2:	4b0b      	ldr	r3, [pc, #44]	@ (80094e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80094ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094be:	d007      	beq.n	80094d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80094c0:	4b07      	ldr	r3, [pc, #28]	@ (80094e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80094c8:	4a05      	ldr	r2, [pc, #20]	@ (80094e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80094ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	40007000 	.word	0x40007000
 80094e4:	20000000 	.word	0x20000000
 80094e8:	431bde83 	.word	0x431bde83

080094ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e3ca      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094fe:	4b97      	ldr	r3, [pc, #604]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f003 030c 	and.w	r3, r3, #12
 8009506:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009508:	4b94      	ldr	r3, [pc, #592]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f003 0303 	and.w	r3, r3, #3
 8009510:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0310 	and.w	r3, r3, #16
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 80e4 	beq.w	80096e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d007      	beq.n	8009536 <HAL_RCC_OscConfig+0x4a>
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2b0c      	cmp	r3, #12
 800952a:	f040 808b 	bne.w	8009644 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b01      	cmp	r3, #1
 8009532:	f040 8087 	bne.w	8009644 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009536:	4b89      	ldr	r3, [pc, #548]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0302 	and.w	r3, r3, #2
 800953e:	2b00      	cmp	r3, #0
 8009540:	d005      	beq.n	800954e <HAL_RCC_OscConfig+0x62>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e3a2      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a1a      	ldr	r2, [r3, #32]
 8009552:	4b82      	ldr	r3, [pc, #520]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0308 	and.w	r3, r3, #8
 800955a:	2b00      	cmp	r3, #0
 800955c:	d004      	beq.n	8009568 <HAL_RCC_OscConfig+0x7c>
 800955e:	4b7f      	ldr	r3, [pc, #508]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009566:	e005      	b.n	8009574 <HAL_RCC_OscConfig+0x88>
 8009568:	4b7c      	ldr	r3, [pc, #496]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 800956a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800956e:	091b      	lsrs	r3, r3, #4
 8009570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009574:	4293      	cmp	r3, r2
 8009576:	d223      	bcs.n	80095c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a1b      	ldr	r3, [r3, #32]
 800957c:	4618      	mov	r0, r3
 800957e:	f000 fd1d 	bl	8009fbc <RCC_SetFlashLatencyFromMSIRange>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e383      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800958c:	4b73      	ldr	r3, [pc, #460]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a72      	ldr	r2, [pc, #456]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009592:	f043 0308 	orr.w	r3, r3, #8
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	4b70      	ldr	r3, [pc, #448]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a1b      	ldr	r3, [r3, #32]
 80095a4:	496d      	ldr	r1, [pc, #436]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80095aa:	4b6c      	ldr	r3, [pc, #432]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	021b      	lsls	r3, r3, #8
 80095b8:	4968      	ldr	r1, [pc, #416]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	604b      	str	r3, [r1, #4]
 80095be:	e025      	b.n	800960c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80095c0:	4b66      	ldr	r3, [pc, #408]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a65      	ldr	r2, [pc, #404]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 80095c6:	f043 0308 	orr.w	r3, r3, #8
 80095ca:	6013      	str	r3, [r2, #0]
 80095cc:	4b63      	ldr	r3, [pc, #396]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a1b      	ldr	r3, [r3, #32]
 80095d8:	4960      	ldr	r1, [pc, #384]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80095de:	4b5f      	ldr	r3, [pc, #380]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	021b      	lsls	r3, r3, #8
 80095ec:	495b      	ldr	r1, [pc, #364]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d109      	bne.n	800960c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 fcdd 	bl	8009fbc <RCC_SetFlashLatencyFromMSIRange>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e343      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800960c:	f000 fc4a 	bl	8009ea4 <HAL_RCC_GetSysClockFreq>
 8009610:	4602      	mov	r2, r0
 8009612:	4b52      	ldr	r3, [pc, #328]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	091b      	lsrs	r3, r3, #4
 8009618:	f003 030f 	and.w	r3, r3, #15
 800961c:	4950      	ldr	r1, [pc, #320]	@ (8009760 <HAL_RCC_OscConfig+0x274>)
 800961e:	5ccb      	ldrb	r3, [r1, r3]
 8009620:	f003 031f 	and.w	r3, r3, #31
 8009624:	fa22 f303 	lsr.w	r3, r2, r3
 8009628:	4a4e      	ldr	r2, [pc, #312]	@ (8009764 <HAL_RCC_OscConfig+0x278>)
 800962a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800962c:	4b4e      	ldr	r3, [pc, #312]	@ (8009768 <HAL_RCC_OscConfig+0x27c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4618      	mov	r0, r3
 8009632:	f7ff f8d1 	bl	80087d8 <HAL_InitTick>
 8009636:	4603      	mov	r3, r0
 8009638:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d052      	beq.n	80096e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	e327      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d032      	beq.n	80096b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800964c:	4b43      	ldr	r3, [pc, #268]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a42      	ldr	r2, [pc, #264]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009652:	f043 0301 	orr.w	r3, r3, #1
 8009656:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009658:	f7ff f90e 	bl	8008878 <HAL_GetTick>
 800965c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800965e:	e008      	b.n	8009672 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009660:	f7ff f90a 	bl	8008878 <HAL_GetTick>
 8009664:	4602      	mov	r2, r0
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	2b02      	cmp	r3, #2
 800966c:	d901      	bls.n	8009672 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e310      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009672:	4b3a      	ldr	r3, [pc, #232]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 0302 	and.w	r3, r3, #2
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0f0      	beq.n	8009660 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800967e:	4b37      	ldr	r3, [pc, #220]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a36      	ldr	r2, [pc, #216]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009684:	f043 0308 	orr.w	r3, r3, #8
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	4b34      	ldr	r3, [pc, #208]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	4931      	ldr	r1, [pc, #196]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009698:	4313      	orrs	r3, r2
 800969a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800969c:	4b2f      	ldr	r3, [pc, #188]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	69db      	ldr	r3, [r3, #28]
 80096a8:	021b      	lsls	r3, r3, #8
 80096aa:	492c      	ldr	r1, [pc, #176]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 80096ac:	4313      	orrs	r3, r2
 80096ae:	604b      	str	r3, [r1, #4]
 80096b0:	e01a      	b.n	80096e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80096b2:	4b2a      	ldr	r3, [pc, #168]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a29      	ldr	r2, [pc, #164]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 80096b8:	f023 0301 	bic.w	r3, r3, #1
 80096bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80096be:	f7ff f8db 	bl	8008878 <HAL_GetTick>
 80096c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80096c4:	e008      	b.n	80096d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80096c6:	f7ff f8d7 	bl	8008878 <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d901      	bls.n	80096d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e2dd      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80096d8:	4b20      	ldr	r3, [pc, #128]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1f0      	bne.n	80096c6 <HAL_RCC_OscConfig+0x1da>
 80096e4:	e000      	b.n	80096e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80096e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0301 	and.w	r3, r3, #1
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d074      	beq.n	80097de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	2b08      	cmp	r3, #8
 80096f8:	d005      	beq.n	8009706 <HAL_RCC_OscConfig+0x21a>
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	2b0c      	cmp	r3, #12
 80096fe:	d10e      	bne.n	800971e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2b03      	cmp	r3, #3
 8009704:	d10b      	bne.n	800971e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009706:	4b15      	ldr	r3, [pc, #84]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d064      	beq.n	80097dc <HAL_RCC_OscConfig+0x2f0>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d160      	bne.n	80097dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e2ba      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009726:	d106      	bne.n	8009736 <HAL_RCC_OscConfig+0x24a>
 8009728:	4b0c      	ldr	r3, [pc, #48]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a0b      	ldr	r2, [pc, #44]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 800972e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	e026      	b.n	8009784 <HAL_RCC_OscConfig+0x298>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800973e:	d115      	bne.n	800976c <HAL_RCC_OscConfig+0x280>
 8009740:	4b06      	ldr	r3, [pc, #24]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a05      	ldr	r2, [pc, #20]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009746:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800974a:	6013      	str	r3, [r2, #0]
 800974c:	4b03      	ldr	r3, [pc, #12]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a02      	ldr	r2, [pc, #8]	@ (800975c <HAL_RCC_OscConfig+0x270>)
 8009752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	e014      	b.n	8009784 <HAL_RCC_OscConfig+0x298>
 800975a:	bf00      	nop
 800975c:	40021000 	.word	0x40021000
 8009760:	0800a3b0 	.word	0x0800a3b0
 8009764:	20000000 	.word	0x20000000
 8009768:	20000004 	.word	0x20000004
 800976c:	4ba0      	ldr	r3, [pc, #640]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a9f      	ldr	r2, [pc, #636]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 8009772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009776:	6013      	str	r3, [r2, #0]
 8009778:	4b9d      	ldr	r3, [pc, #628]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a9c      	ldr	r2, [pc, #624]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 800977e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d013      	beq.n	80097b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800978c:	f7ff f874 	bl	8008878 <HAL_GetTick>
 8009790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009792:	e008      	b.n	80097a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009794:	f7ff f870 	bl	8008878 <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	2b64      	cmp	r3, #100	@ 0x64
 80097a0:	d901      	bls.n	80097a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e276      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80097a6:	4b92      	ldr	r3, [pc, #584]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d0f0      	beq.n	8009794 <HAL_RCC_OscConfig+0x2a8>
 80097b2:	e014      	b.n	80097de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097b4:	f7ff f860 	bl	8008878 <HAL_GetTick>
 80097b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80097ba:	e008      	b.n	80097ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097bc:	f7ff f85c 	bl	8008878 <HAL_GetTick>
 80097c0:	4602      	mov	r2, r0
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	2b64      	cmp	r3, #100	@ 0x64
 80097c8:	d901      	bls.n	80097ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80097ca:	2303      	movs	r3, #3
 80097cc:	e262      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80097ce:	4b88      	ldr	r3, [pc, #544]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1f0      	bne.n	80097bc <HAL_RCC_OscConfig+0x2d0>
 80097da:	e000      	b.n	80097de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0302 	and.w	r3, r3, #2
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d060      	beq.n	80098ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	2b04      	cmp	r3, #4
 80097ee:	d005      	beq.n	80097fc <HAL_RCC_OscConfig+0x310>
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	2b0c      	cmp	r3, #12
 80097f4:	d119      	bne.n	800982a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d116      	bne.n	800982a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097fc:	4b7c      	ldr	r3, [pc, #496]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009804:	2b00      	cmp	r3, #0
 8009806:	d005      	beq.n	8009814 <HAL_RCC_OscConfig+0x328>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e23f      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009814:	4b76      	ldr	r3, [pc, #472]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	061b      	lsls	r3, r3, #24
 8009822:	4973      	ldr	r1, [pc, #460]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 8009824:	4313      	orrs	r3, r2
 8009826:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009828:	e040      	b.n	80098ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d023      	beq.n	800987a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009832:	4b6f      	ldr	r3, [pc, #444]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a6e      	ldr	r2, [pc, #440]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 8009838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800983c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800983e:	f7ff f81b 	bl	8008878 <HAL_GetTick>
 8009842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009844:	e008      	b.n	8009858 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009846:	f7ff f817 	bl	8008878 <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	2b02      	cmp	r3, #2
 8009852:	d901      	bls.n	8009858 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e21d      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009858:	4b65      	ldr	r3, [pc, #404]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009860:	2b00      	cmp	r3, #0
 8009862:	d0f0      	beq.n	8009846 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009864:	4b62      	ldr	r3, [pc, #392]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	061b      	lsls	r3, r3, #24
 8009872:	495f      	ldr	r1, [pc, #380]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 8009874:	4313      	orrs	r3, r2
 8009876:	604b      	str	r3, [r1, #4]
 8009878:	e018      	b.n	80098ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800987a:	4b5d      	ldr	r3, [pc, #372]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a5c      	ldr	r2, [pc, #368]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 8009880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009886:	f7fe fff7 	bl	8008878 <HAL_GetTick>
 800988a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800988c:	e008      	b.n	80098a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800988e:	f7fe fff3 	bl	8008878 <HAL_GetTick>
 8009892:	4602      	mov	r2, r0
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	2b02      	cmp	r3, #2
 800989a:	d901      	bls.n	80098a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800989c:	2303      	movs	r3, #3
 800989e:	e1f9      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80098a0:	4b53      	ldr	r3, [pc, #332]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1f0      	bne.n	800988e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0308 	and.w	r3, r3, #8
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d03c      	beq.n	8009932 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01c      	beq.n	80098fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098c0:	4b4b      	ldr	r3, [pc, #300]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80098c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098c6:	4a4a      	ldr	r2, [pc, #296]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80098c8:	f043 0301 	orr.w	r3, r3, #1
 80098cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098d0:	f7fe ffd2 	bl	8008878 <HAL_GetTick>
 80098d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80098d6:	e008      	b.n	80098ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098d8:	f7fe ffce 	bl	8008878 <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d901      	bls.n	80098ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e1d4      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80098ea:	4b41      	ldr	r3, [pc, #260]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80098ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098f0:	f003 0302 	and.w	r3, r3, #2
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d0ef      	beq.n	80098d8 <HAL_RCC_OscConfig+0x3ec>
 80098f8:	e01b      	b.n	8009932 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098fa:	4b3d      	ldr	r3, [pc, #244]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80098fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009900:	4a3b      	ldr	r2, [pc, #236]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 8009902:	f023 0301 	bic.w	r3, r3, #1
 8009906:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800990a:	f7fe ffb5 	bl	8008878 <HAL_GetTick>
 800990e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009910:	e008      	b.n	8009924 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009912:	f7fe ffb1 	bl	8008878 <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	2b02      	cmp	r3, #2
 800991e:	d901      	bls.n	8009924 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	e1b7      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009924:	4b32      	ldr	r3, [pc, #200]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 8009926:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800992a:	f003 0302 	and.w	r3, r3, #2
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1ef      	bne.n	8009912 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0304 	and.w	r3, r3, #4
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 80a6 	beq.w	8009a8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009940:	2300      	movs	r3, #0
 8009942:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009944:	4b2a      	ldr	r3, [pc, #168]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 8009946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10d      	bne.n	800996c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009950:	4b27      	ldr	r3, [pc, #156]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 8009952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009954:	4a26      	ldr	r2, [pc, #152]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 8009956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800995a:	6593      	str	r3, [r2, #88]	@ 0x58
 800995c:	4b24      	ldr	r3, [pc, #144]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 800995e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009964:	60bb      	str	r3, [r7, #8]
 8009966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009968:	2301      	movs	r3, #1
 800996a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800996c:	4b21      	ldr	r3, [pc, #132]	@ (80099f4 <HAL_RCC_OscConfig+0x508>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009974:	2b00      	cmp	r3, #0
 8009976:	d118      	bne.n	80099aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009978:	4b1e      	ldr	r3, [pc, #120]	@ (80099f4 <HAL_RCC_OscConfig+0x508>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a1d      	ldr	r2, [pc, #116]	@ (80099f4 <HAL_RCC_OscConfig+0x508>)
 800997e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009982:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009984:	f7fe ff78 	bl	8008878 <HAL_GetTick>
 8009988:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800998a:	e008      	b.n	800999e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800998c:	f7fe ff74 	bl	8008878 <HAL_GetTick>
 8009990:	4602      	mov	r2, r0
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	2b02      	cmp	r3, #2
 8009998:	d901      	bls.n	800999e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800999a:	2303      	movs	r3, #3
 800999c:	e17a      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800999e:	4b15      	ldr	r3, [pc, #84]	@ (80099f4 <HAL_RCC_OscConfig+0x508>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0f0      	beq.n	800998c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d108      	bne.n	80099c4 <HAL_RCC_OscConfig+0x4d8>
 80099b2:	4b0f      	ldr	r3, [pc, #60]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80099b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099b8:	4a0d      	ldr	r2, [pc, #52]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80099ba:	f043 0301 	orr.w	r3, r3, #1
 80099be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80099c2:	e029      	b.n	8009a18 <HAL_RCC_OscConfig+0x52c>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	2b05      	cmp	r3, #5
 80099ca:	d115      	bne.n	80099f8 <HAL_RCC_OscConfig+0x50c>
 80099cc:	4b08      	ldr	r3, [pc, #32]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80099ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099d2:	4a07      	ldr	r2, [pc, #28]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80099d4:	f043 0304 	orr.w	r3, r3, #4
 80099d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80099dc:	4b04      	ldr	r3, [pc, #16]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80099de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099e2:	4a03      	ldr	r2, [pc, #12]	@ (80099f0 <HAL_RCC_OscConfig+0x504>)
 80099e4:	f043 0301 	orr.w	r3, r3, #1
 80099e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80099ec:	e014      	b.n	8009a18 <HAL_RCC_OscConfig+0x52c>
 80099ee:	bf00      	nop
 80099f0:	40021000 	.word	0x40021000
 80099f4:	40007000 	.word	0x40007000
 80099f8:	4b9c      	ldr	r3, [pc, #624]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 80099fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099fe:	4a9b      	ldr	r2, [pc, #620]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009a00:	f023 0301 	bic.w	r3, r3, #1
 8009a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009a08:	4b98      	ldr	r3, [pc, #608]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a0e:	4a97      	ldr	r2, [pc, #604]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009a10:	f023 0304 	bic.w	r3, r3, #4
 8009a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d016      	beq.n	8009a4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a20:	f7fe ff2a 	bl	8008878 <HAL_GetTick>
 8009a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a26:	e00a      	b.n	8009a3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a28:	f7fe ff26 	bl	8008878 <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d901      	bls.n	8009a3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e12a      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a44:	f003 0302 	and.w	r3, r3, #2
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d0ed      	beq.n	8009a28 <HAL_RCC_OscConfig+0x53c>
 8009a4c:	e015      	b.n	8009a7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a4e:	f7fe ff13 	bl	8008878 <HAL_GetTick>
 8009a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a54:	e00a      	b.n	8009a6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a56:	f7fe ff0f 	bl	8008878 <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d901      	bls.n	8009a6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e113      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a6c:	4b7f      	ldr	r3, [pc, #508]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a72:	f003 0302 	and.w	r3, r3, #2
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1ed      	bne.n	8009a56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a7a:	7ffb      	ldrb	r3, [r7, #31]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d105      	bne.n	8009a8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a80:	4b7a      	ldr	r3, [pc, #488]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a84:	4a79      	ldr	r2, [pc, #484]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009a86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a8a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 80fe 	beq.w	8009c92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	f040 80d0 	bne.w	8009c40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009aa0:	4b72      	ldr	r3, [pc, #456]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	f003 0203 	and.w	r2, r3, #3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d130      	bne.n	8009b16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d127      	bne.n	8009b16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ad0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d11f      	bne.n	8009b16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009ae0:	2a07      	cmp	r2, #7
 8009ae2:	bf14      	ite	ne
 8009ae4:	2201      	movne	r2, #1
 8009ae6:	2200      	moveq	r2, #0
 8009ae8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d113      	bne.n	8009b16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009af8:	085b      	lsrs	r3, r3, #1
 8009afa:	3b01      	subs	r3, #1
 8009afc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d109      	bne.n	8009b16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b0c:	085b      	lsrs	r3, r3, #1
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d06e      	beq.n	8009bf4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	2b0c      	cmp	r3, #12
 8009b1a:	d069      	beq.n	8009bf0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009b1c:	4b53      	ldr	r3, [pc, #332]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d105      	bne.n	8009b34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009b28:	4b50      	ldr	r3, [pc, #320]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e0ad      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009b38:	4b4c      	ldr	r3, [pc, #304]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a4b      	ldr	r2, [pc, #300]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009b44:	f7fe fe98 	bl	8008878 <HAL_GetTick>
 8009b48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b4a:	e008      	b.n	8009b5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b4c:	f7fe fe94 	bl	8008878 <HAL_GetTick>
 8009b50:	4602      	mov	r2, r0
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d901      	bls.n	8009b5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e09a      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b5e:	4b43      	ldr	r3, [pc, #268]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1f0      	bne.n	8009b4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b6a:	4b40      	ldr	r3, [pc, #256]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009b6c:	68da      	ldr	r2, [r3, #12]
 8009b6e:	4b40      	ldr	r3, [pc, #256]	@ (8009c70 <HAL_RCC_OscConfig+0x784>)
 8009b70:	4013      	ands	r3, r2
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009b7a:	3a01      	subs	r2, #1
 8009b7c:	0112      	lsls	r2, r2, #4
 8009b7e:	4311      	orrs	r1, r2
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009b84:	0212      	lsls	r2, r2, #8
 8009b86:	4311      	orrs	r1, r2
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009b8c:	0852      	lsrs	r2, r2, #1
 8009b8e:	3a01      	subs	r2, #1
 8009b90:	0552      	lsls	r2, r2, #21
 8009b92:	4311      	orrs	r1, r2
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009b98:	0852      	lsrs	r2, r2, #1
 8009b9a:	3a01      	subs	r2, #1
 8009b9c:	0652      	lsls	r2, r2, #25
 8009b9e:	4311      	orrs	r1, r2
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009ba4:	0912      	lsrs	r2, r2, #4
 8009ba6:	0452      	lsls	r2, r2, #17
 8009ba8:	430a      	orrs	r2, r1
 8009baa:	4930      	ldr	r1, [pc, #192]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009bb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009bc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009bc8:	f7fe fe56 	bl	8008878 <HAL_GetTick>
 8009bcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bce:	e008      	b.n	8009be2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bd0:	f7fe fe52 	bl	8008878 <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d901      	bls.n	8009be2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e058      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009be2:	4b22      	ldr	r3, [pc, #136]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0f0      	beq.n	8009bd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009bee:	e050      	b.n	8009c92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e04f      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d148      	bne.n	8009c92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009c00:	4b1a      	ldr	r3, [pc, #104]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a19      	ldr	r2, [pc, #100]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009c06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009c0c:	4b17      	ldr	r3, [pc, #92]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	4a16      	ldr	r2, [pc, #88]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009c18:	f7fe fe2e 	bl	8008878 <HAL_GetTick>
 8009c1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c1e:	e008      	b.n	8009c32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c20:	f7fe fe2a 	bl	8008878 <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d901      	bls.n	8009c32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e030      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c32:	4b0e      	ldr	r3, [pc, #56]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0f0      	beq.n	8009c20 <HAL_RCC_OscConfig+0x734>
 8009c3e:	e028      	b.n	8009c92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	2b0c      	cmp	r3, #12
 8009c44:	d023      	beq.n	8009c8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c46:	4b09      	ldr	r3, [pc, #36]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a08      	ldr	r2, [pc, #32]	@ (8009c6c <HAL_RCC_OscConfig+0x780>)
 8009c4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c52:	f7fe fe11 	bl	8008878 <HAL_GetTick>
 8009c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c58:	e00c      	b.n	8009c74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c5a:	f7fe fe0d 	bl	8008878 <HAL_GetTick>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d905      	bls.n	8009c74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	e013      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
 8009c6c:	40021000 	.word	0x40021000
 8009c70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c74:	4b09      	ldr	r3, [pc, #36]	@ (8009c9c <HAL_RCC_OscConfig+0x7b0>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1ec      	bne.n	8009c5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009c80:	4b06      	ldr	r3, [pc, #24]	@ (8009c9c <HAL_RCC_OscConfig+0x7b0>)
 8009c82:	68da      	ldr	r2, [r3, #12]
 8009c84:	4905      	ldr	r1, [pc, #20]	@ (8009c9c <HAL_RCC_OscConfig+0x7b0>)
 8009c86:	4b06      	ldr	r3, [pc, #24]	@ (8009ca0 <HAL_RCC_OscConfig+0x7b4>)
 8009c88:	4013      	ands	r3, r2
 8009c8a:	60cb      	str	r3, [r1, #12]
 8009c8c:	e001      	b.n	8009c92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e000      	b.n	8009c94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3720      	adds	r7, #32
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	40021000 	.word	0x40021000
 8009ca0:	feeefffc 	.word	0xfeeefffc

08009ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e0e7      	b.n	8009e88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009cb8:	4b75      	ldr	r3, [pc, #468]	@ (8009e90 <HAL_RCC_ClockConfig+0x1ec>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0307 	and.w	r3, r3, #7
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d910      	bls.n	8009ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cc6:	4b72      	ldr	r3, [pc, #456]	@ (8009e90 <HAL_RCC_ClockConfig+0x1ec>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f023 0207 	bic.w	r2, r3, #7
 8009cce:	4970      	ldr	r1, [pc, #448]	@ (8009e90 <HAL_RCC_ClockConfig+0x1ec>)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cd6:	4b6e      	ldr	r3, [pc, #440]	@ (8009e90 <HAL_RCC_ClockConfig+0x1ec>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 0307 	and.w	r3, r3, #7
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d001      	beq.n	8009ce8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e0cf      	b.n	8009e88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0302 	and.w	r3, r3, #2
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d010      	beq.n	8009d16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	689a      	ldr	r2, [r3, #8]
 8009cf8:	4b66      	ldr	r3, [pc, #408]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d908      	bls.n	8009d16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d04:	4b63      	ldr	r3, [pc, #396]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	4960      	ldr	r1, [pc, #384]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009d12:	4313      	orrs	r3, r2
 8009d14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d04c      	beq.n	8009dbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d107      	bne.n	8009d3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d2a:	4b5a      	ldr	r3, [pc, #360]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d121      	bne.n	8009d7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e0a6      	b.n	8009e88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d107      	bne.n	8009d52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d42:	4b54      	ldr	r3, [pc, #336]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d115      	bne.n	8009d7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e09a      	b.n	8009e88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d107      	bne.n	8009d6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 0302 	and.w	r3, r3, #2
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d109      	bne.n	8009d7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e08e      	b.n	8009e88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d101      	bne.n	8009d7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e086      	b.n	8009e88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d7a:	4b46      	ldr	r3, [pc, #280]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f023 0203 	bic.w	r2, r3, #3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	4943      	ldr	r1, [pc, #268]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d8c:	f7fe fd74 	bl	8008878 <HAL_GetTick>
 8009d90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d92:	e00a      	b.n	8009daa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d94:	f7fe fd70 	bl	8008878 <HAL_GetTick>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	1ad3      	subs	r3, r2, r3
 8009d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d901      	bls.n	8009daa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e06e      	b.n	8009e88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009daa:	4b3a      	ldr	r3, [pc, #232]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	f003 020c 	and.w	r2, r3, #12
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d1eb      	bne.n	8009d94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 0302 	and.w	r3, r3, #2
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d010      	beq.n	8009dea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689a      	ldr	r2, [r3, #8]
 8009dcc:	4b31      	ldr	r3, [pc, #196]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d208      	bcs.n	8009dea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	492b      	ldr	r1, [pc, #172]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009de6:	4313      	orrs	r3, r2
 8009de8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009dea:	4b29      	ldr	r3, [pc, #164]	@ (8009e90 <HAL_RCC_ClockConfig+0x1ec>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 0307 	and.w	r3, r3, #7
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d210      	bcs.n	8009e1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009df8:	4b25      	ldr	r3, [pc, #148]	@ (8009e90 <HAL_RCC_ClockConfig+0x1ec>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f023 0207 	bic.w	r2, r3, #7
 8009e00:	4923      	ldr	r1, [pc, #140]	@ (8009e90 <HAL_RCC_ClockConfig+0x1ec>)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e08:	4b21      	ldr	r3, [pc, #132]	@ (8009e90 <HAL_RCC_ClockConfig+0x1ec>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 0307 	and.w	r3, r3, #7
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d001      	beq.n	8009e1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e036      	b.n	8009e88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 0304 	and.w	r3, r3, #4
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d008      	beq.n	8009e38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e26:	4b1b      	ldr	r3, [pc, #108]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	4918      	ldr	r1, [pc, #96]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0308 	and.w	r3, r3, #8
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d009      	beq.n	8009e58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e44:	4b13      	ldr	r3, [pc, #76]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	4910      	ldr	r1, [pc, #64]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009e58:	f000 f824 	bl	8009ea4 <HAL_RCC_GetSysClockFreq>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e94 <HAL_RCC_ClockConfig+0x1f0>)
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	091b      	lsrs	r3, r3, #4
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	490b      	ldr	r1, [pc, #44]	@ (8009e98 <HAL_RCC_ClockConfig+0x1f4>)
 8009e6a:	5ccb      	ldrb	r3, [r1, r3]
 8009e6c:	f003 031f 	and.w	r3, r3, #31
 8009e70:	fa22 f303 	lsr.w	r3, r2, r3
 8009e74:	4a09      	ldr	r2, [pc, #36]	@ (8009e9c <HAL_RCC_ClockConfig+0x1f8>)
 8009e76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009e78:	4b09      	ldr	r3, [pc, #36]	@ (8009ea0 <HAL_RCC_ClockConfig+0x1fc>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fe fcab 	bl	80087d8 <HAL_InitTick>
 8009e82:	4603      	mov	r3, r0
 8009e84:	72fb      	strb	r3, [r7, #11]

  return status;
 8009e86:	7afb      	ldrb	r3, [r7, #11]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	40022000 	.word	0x40022000
 8009e94:	40021000 	.word	0x40021000
 8009e98:	0800a3b0 	.word	0x0800a3b0
 8009e9c:	20000000 	.word	0x20000000
 8009ea0:	20000004 	.word	0x20000004

08009ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b089      	sub	sp, #36	@ 0x24
 8009ea8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	61fb      	str	r3, [r7, #28]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8009fac <HAL_RCC_GetSysClockFreq+0x108>)
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f003 030c 	and.w	r3, r3, #12
 8009eba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8009fac <HAL_RCC_GetSysClockFreq+0x108>)
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	f003 0303 	and.w	r3, r3, #3
 8009ec4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d005      	beq.n	8009ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	2b0c      	cmp	r3, #12
 8009ed0:	d121      	bne.n	8009f16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d11e      	bne.n	8009f16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009ed8:	4b34      	ldr	r3, [pc, #208]	@ (8009fac <HAL_RCC_GetSysClockFreq+0x108>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 0308 	and.w	r3, r3, #8
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d107      	bne.n	8009ef4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009ee4:	4b31      	ldr	r3, [pc, #196]	@ (8009fac <HAL_RCC_GetSysClockFreq+0x108>)
 8009ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009eea:	0a1b      	lsrs	r3, r3, #8
 8009eec:	f003 030f 	and.w	r3, r3, #15
 8009ef0:	61fb      	str	r3, [r7, #28]
 8009ef2:	e005      	b.n	8009f00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8009fac <HAL_RCC_GetSysClockFreq+0x108>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	091b      	lsrs	r3, r3, #4
 8009efa:	f003 030f 	and.w	r3, r3, #15
 8009efe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009f00:	4a2b      	ldr	r2, [pc, #172]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10d      	bne.n	8009f2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009f14:	e00a      	b.n	8009f2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	2b04      	cmp	r3, #4
 8009f1a:	d102      	bne.n	8009f22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009f1c:	4b25      	ldr	r3, [pc, #148]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8009f1e:	61bb      	str	r3, [r7, #24]
 8009f20:	e004      	b.n	8009f2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	2b08      	cmp	r3, #8
 8009f26:	d101      	bne.n	8009f2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009f28:	4b23      	ldr	r3, [pc, #140]	@ (8009fb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8009f2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	2b0c      	cmp	r3, #12
 8009f30:	d134      	bne.n	8009f9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009f32:	4b1e      	ldr	r3, [pc, #120]	@ (8009fac <HAL_RCC_GetSysClockFreq+0x108>)
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d003      	beq.n	8009f4a <HAL_RCC_GetSysClockFreq+0xa6>
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2b03      	cmp	r3, #3
 8009f46:	d003      	beq.n	8009f50 <HAL_RCC_GetSysClockFreq+0xac>
 8009f48:	e005      	b.n	8009f56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8009f4c:	617b      	str	r3, [r7, #20]
      break;
 8009f4e:	e005      	b.n	8009f5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009f50:	4b19      	ldr	r3, [pc, #100]	@ (8009fb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8009f52:	617b      	str	r3, [r7, #20]
      break;
 8009f54:	e002      	b.n	8009f5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	617b      	str	r3, [r7, #20]
      break;
 8009f5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009f5c:	4b13      	ldr	r3, [pc, #76]	@ (8009fac <HAL_RCC_GetSysClockFreq+0x108>)
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	091b      	lsrs	r3, r3, #4
 8009f62:	f003 0307 	and.w	r3, r3, #7
 8009f66:	3301      	adds	r3, #1
 8009f68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009f6a:	4b10      	ldr	r3, [pc, #64]	@ (8009fac <HAL_RCC_GetSysClockFreq+0x108>)
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	0a1b      	lsrs	r3, r3, #8
 8009f70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	fb03 f202 	mul.w	r2, r3, r2
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009f82:	4b0a      	ldr	r3, [pc, #40]	@ (8009fac <HAL_RCC_GetSysClockFreq+0x108>)
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	0e5b      	lsrs	r3, r3, #25
 8009f88:	f003 0303 	and.w	r3, r3, #3
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	005b      	lsls	r3, r3, #1
 8009f90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009f92:	697a      	ldr	r2, [r7, #20]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009f9c:	69bb      	ldr	r3, [r7, #24]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3724      	adds	r7, #36	@ 0x24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	40021000 	.word	0x40021000
 8009fb0:	0800a3c0 	.word	0x0800a3c0
 8009fb4:	00f42400 	.word	0x00f42400
 8009fb8:	007a1200 	.word	0x007a1200

08009fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009fc8:	4b2a      	ldr	r3, [pc, #168]	@ (800a074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d003      	beq.n	8009fdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009fd4:	f7ff fa26 	bl	8009424 <HAL_PWREx_GetVoltageRange>
 8009fd8:	6178      	str	r0, [r7, #20]
 8009fda:	e014      	b.n	800a006 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009fdc:	4b25      	ldr	r3, [pc, #148]	@ (800a074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fe0:	4a24      	ldr	r2, [pc, #144]	@ (800a074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fe6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fe8:	4b22      	ldr	r3, [pc, #136]	@ (800a074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ff0:	60fb      	str	r3, [r7, #12]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009ff4:	f7ff fa16 	bl	8009424 <HAL_PWREx_GetVoltageRange>
 8009ff8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009ffa:	4b1e      	ldr	r3, [pc, #120]	@ (800a074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ffe:	4a1d      	ldr	r2, [pc, #116]	@ (800a074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a004:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a00c:	d10b      	bne.n	800a026 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b80      	cmp	r3, #128	@ 0x80
 800a012:	d919      	bls.n	800a048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2ba0      	cmp	r3, #160	@ 0xa0
 800a018:	d902      	bls.n	800a020 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a01a:	2302      	movs	r3, #2
 800a01c:	613b      	str	r3, [r7, #16]
 800a01e:	e013      	b.n	800a048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a020:	2301      	movs	r3, #1
 800a022:	613b      	str	r3, [r7, #16]
 800a024:	e010      	b.n	800a048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b80      	cmp	r3, #128	@ 0x80
 800a02a:	d902      	bls.n	800a032 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a02c:	2303      	movs	r3, #3
 800a02e:	613b      	str	r3, [r7, #16]
 800a030:	e00a      	b.n	800a048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b80      	cmp	r3, #128	@ 0x80
 800a036:	d102      	bne.n	800a03e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a038:	2302      	movs	r3, #2
 800a03a:	613b      	str	r3, [r7, #16]
 800a03c:	e004      	b.n	800a048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2b70      	cmp	r3, #112	@ 0x70
 800a042:	d101      	bne.n	800a048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a044:	2301      	movs	r3, #1
 800a046:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a048:	4b0b      	ldr	r3, [pc, #44]	@ (800a078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f023 0207 	bic.w	r2, r3, #7
 800a050:	4909      	ldr	r1, [pc, #36]	@ (800a078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	4313      	orrs	r3, r2
 800a056:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a058:	4b07      	ldr	r3, [pc, #28]	@ (800a078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0307 	and.w	r3, r3, #7
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	429a      	cmp	r2, r3
 800a064:	d001      	beq.n	800a06a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	40021000 	.word	0x40021000
 800a078:	40022000 	.word	0x40022000

0800a07c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e049      	b.n	800a122 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d106      	bne.n	800a0a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7fe faf4 	bl	8008690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2202      	movs	r2, #2
 800a0ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4610      	mov	r0, r2
 800a0bc:	f000 f8a6 	bl	800a20c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
	...

0800a12c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d001      	beq.n	800a144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	e04f      	b.n	800a1e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68da      	ldr	r2, [r3, #12]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f042 0201 	orr.w	r2, r2, #1
 800a15a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a23      	ldr	r2, [pc, #140]	@ (800a1f0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d01d      	beq.n	800a1a2 <HAL_TIM_Base_Start_IT+0x76>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a16e:	d018      	beq.n	800a1a2 <HAL_TIM_Base_Start_IT+0x76>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a1f      	ldr	r2, [pc, #124]	@ (800a1f4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d013      	beq.n	800a1a2 <HAL_TIM_Base_Start_IT+0x76>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a1e      	ldr	r2, [pc, #120]	@ (800a1f8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d00e      	beq.n	800a1a2 <HAL_TIM_Base_Start_IT+0x76>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a1c      	ldr	r2, [pc, #112]	@ (800a1fc <HAL_TIM_Base_Start_IT+0xd0>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d009      	beq.n	800a1a2 <HAL_TIM_Base_Start_IT+0x76>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a1b      	ldr	r2, [pc, #108]	@ (800a200 <HAL_TIM_Base_Start_IT+0xd4>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d004      	beq.n	800a1a2 <HAL_TIM_Base_Start_IT+0x76>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a19      	ldr	r2, [pc, #100]	@ (800a204 <HAL_TIM_Base_Start_IT+0xd8>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d115      	bne.n	800a1ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	4b17      	ldr	r3, [pc, #92]	@ (800a208 <HAL_TIM_Base_Start_IT+0xdc>)
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b06      	cmp	r3, #6
 800a1b2:	d015      	beq.n	800a1e0 <HAL_TIM_Base_Start_IT+0xb4>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1ba:	d011      	beq.n	800a1e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f042 0201 	orr.w	r2, r2, #1
 800a1ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1cc:	e008      	b.n	800a1e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f042 0201 	orr.w	r2, r2, #1
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	e000      	b.n	800a1e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	40012c00 	.word	0x40012c00
 800a1f4:	40000400 	.word	0x40000400
 800a1f8:	40000800 	.word	0x40000800
 800a1fc:	40000c00 	.word	0x40000c00
 800a200:	40013400 	.word	0x40013400
 800a204:	40014000 	.word	0x40014000
 800a208:	00010007 	.word	0x00010007

0800a20c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a40      	ldr	r2, [pc, #256]	@ (800a320 <TIM_Base_SetConfig+0x114>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d013      	beq.n	800a24c <TIM_Base_SetConfig+0x40>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a22a:	d00f      	beq.n	800a24c <TIM_Base_SetConfig+0x40>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a3d      	ldr	r2, [pc, #244]	@ (800a324 <TIM_Base_SetConfig+0x118>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d00b      	beq.n	800a24c <TIM_Base_SetConfig+0x40>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a3c      	ldr	r2, [pc, #240]	@ (800a328 <TIM_Base_SetConfig+0x11c>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d007      	beq.n	800a24c <TIM_Base_SetConfig+0x40>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a3b      	ldr	r2, [pc, #236]	@ (800a32c <TIM_Base_SetConfig+0x120>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d003      	beq.n	800a24c <TIM_Base_SetConfig+0x40>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a3a      	ldr	r2, [pc, #232]	@ (800a330 <TIM_Base_SetConfig+0x124>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d108      	bne.n	800a25e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a2f      	ldr	r2, [pc, #188]	@ (800a320 <TIM_Base_SetConfig+0x114>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d01f      	beq.n	800a2a6 <TIM_Base_SetConfig+0x9a>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a26c:	d01b      	beq.n	800a2a6 <TIM_Base_SetConfig+0x9a>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4a2c      	ldr	r2, [pc, #176]	@ (800a324 <TIM_Base_SetConfig+0x118>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d017      	beq.n	800a2a6 <TIM_Base_SetConfig+0x9a>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4a2b      	ldr	r2, [pc, #172]	@ (800a328 <TIM_Base_SetConfig+0x11c>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d013      	beq.n	800a2a6 <TIM_Base_SetConfig+0x9a>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a2a      	ldr	r2, [pc, #168]	@ (800a32c <TIM_Base_SetConfig+0x120>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d00f      	beq.n	800a2a6 <TIM_Base_SetConfig+0x9a>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a29      	ldr	r2, [pc, #164]	@ (800a330 <TIM_Base_SetConfig+0x124>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d00b      	beq.n	800a2a6 <TIM_Base_SetConfig+0x9a>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a28      	ldr	r2, [pc, #160]	@ (800a334 <TIM_Base_SetConfig+0x128>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d007      	beq.n	800a2a6 <TIM_Base_SetConfig+0x9a>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a27      	ldr	r2, [pc, #156]	@ (800a338 <TIM_Base_SetConfig+0x12c>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d003      	beq.n	800a2a6 <TIM_Base_SetConfig+0x9a>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a26      	ldr	r2, [pc, #152]	@ (800a33c <TIM_Base_SetConfig+0x130>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d108      	bne.n	800a2b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	689a      	ldr	r2, [r3, #8]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a10      	ldr	r2, [pc, #64]	@ (800a320 <TIM_Base_SetConfig+0x114>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d00f      	beq.n	800a304 <TIM_Base_SetConfig+0xf8>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a12      	ldr	r2, [pc, #72]	@ (800a330 <TIM_Base_SetConfig+0x124>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d00b      	beq.n	800a304 <TIM_Base_SetConfig+0xf8>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a11      	ldr	r2, [pc, #68]	@ (800a334 <TIM_Base_SetConfig+0x128>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d007      	beq.n	800a304 <TIM_Base_SetConfig+0xf8>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a10      	ldr	r2, [pc, #64]	@ (800a338 <TIM_Base_SetConfig+0x12c>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d003      	beq.n	800a304 <TIM_Base_SetConfig+0xf8>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a0f      	ldr	r2, [pc, #60]	@ (800a33c <TIM_Base_SetConfig+0x130>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d103      	bne.n	800a30c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	691a      	ldr	r2, [r3, #16]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	615a      	str	r2, [r3, #20]
}
 800a312:	bf00      	nop
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	40012c00 	.word	0x40012c00
 800a324:	40000400 	.word	0x40000400
 800a328:	40000800 	.word	0x40000800
 800a32c:	40000c00 	.word	0x40000c00
 800a330:	40013400 	.word	0x40013400
 800a334:	40014000 	.word	0x40014000
 800a338:	40014400 	.word	0x40014400
 800a33c:	40014800 	.word	0x40014800

0800a340 <memset>:
 800a340:	4402      	add	r2, r0
 800a342:	4603      	mov	r3, r0
 800a344:	4293      	cmp	r3, r2
 800a346:	d100      	bne.n	800a34a <memset+0xa>
 800a348:	4770      	bx	lr
 800a34a:	f803 1b01 	strb.w	r1, [r3], #1
 800a34e:	e7f9      	b.n	800a344 <memset+0x4>

0800a350 <__libc_init_array>:
 800a350:	b570      	push	{r4, r5, r6, lr}
 800a352:	4d0d      	ldr	r5, [pc, #52]	@ (800a388 <__libc_init_array+0x38>)
 800a354:	4c0d      	ldr	r4, [pc, #52]	@ (800a38c <__libc_init_array+0x3c>)
 800a356:	1b64      	subs	r4, r4, r5
 800a358:	10a4      	asrs	r4, r4, #2
 800a35a:	2600      	movs	r6, #0
 800a35c:	42a6      	cmp	r6, r4
 800a35e:	d109      	bne.n	800a374 <__libc_init_array+0x24>
 800a360:	4d0b      	ldr	r5, [pc, #44]	@ (800a390 <__libc_init_array+0x40>)
 800a362:	4c0c      	ldr	r4, [pc, #48]	@ (800a394 <__libc_init_array+0x44>)
 800a364:	f000 f818 	bl	800a398 <_init>
 800a368:	1b64      	subs	r4, r4, r5
 800a36a:	10a4      	asrs	r4, r4, #2
 800a36c:	2600      	movs	r6, #0
 800a36e:	42a6      	cmp	r6, r4
 800a370:	d105      	bne.n	800a37e <__libc_init_array+0x2e>
 800a372:	bd70      	pop	{r4, r5, r6, pc}
 800a374:	f855 3b04 	ldr.w	r3, [r5], #4
 800a378:	4798      	blx	r3
 800a37a:	3601      	adds	r6, #1
 800a37c:	e7ee      	b.n	800a35c <__libc_init_array+0xc>
 800a37e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a382:	4798      	blx	r3
 800a384:	3601      	adds	r6, #1
 800a386:	e7f2      	b.n	800a36e <__libc_init_array+0x1e>
 800a388:	0800a3f0 	.word	0x0800a3f0
 800a38c:	0800a3f0 	.word	0x0800a3f0
 800a390:	0800a3f0 	.word	0x0800a3f0
 800a394:	0800a3f4 	.word	0x0800a3f4

0800a398 <_init>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	bf00      	nop
 800a39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a39e:	bc08      	pop	{r3}
 800a3a0:	469e      	mov	lr, r3
 800a3a2:	4770      	bx	lr

0800a3a4 <_fini>:
 800a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a6:	bf00      	nop
 800a3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3aa:	bc08      	pop	{r3}
 800a3ac:	469e      	mov	lr, r3
 800a3ae:	4770      	bx	lr
