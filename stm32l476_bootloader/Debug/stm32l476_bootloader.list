
stm32l476_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e88  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003010  08003010  00004010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003050  08003050  00005034  2**0
                  CONTENTS
  4 .ARM          00000000  08003050  08003050  00005034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003050  08003050  00005034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003050  08003050  00004050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003054  08003054  00004054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08003058  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000034  0800308c  00005034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800308c  00005120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5d7  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022bb  00000000  00000000  0001163b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000138f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a40  00000000  00000000  00014670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002628c  00000000  00000000  000150b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edaf  00000000  00000000  0003b33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecaed  00000000  00000000  0004a0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136bd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000371c  00000000  00000000  00136c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0013a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ff8 	.word	0x08002ff8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08002ff8 	.word	0x08002ff8

080001c8 <btld_EraseFlash>:

    HAL_FLASH_Lock();
}

/* Erase flash ---------------------------------------------------------------*/
uint8_t btld_EraseFlash(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
    uint32_t NbrOfPages = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	61bb      	str	r3, [r7, #24]
    uint32_t PageError  = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]
    FLASH_EraseInitTypeDef  pEraseInit;
    HAL_StatusTypeDef       status = HAL_OK;
 80001d6:	2300      	movs	r3, #0
 80001d8:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Unlock();
 80001da:	f001 fb23 	bl	8001824 <HAL_FLASH_Unlock>

    /* Get the number of pages to erase */
    NbrOfPages = (FLASH_BASE + FLASH_SIZE - APP_ADDRESS) / FLASH_PAGE_SIZE;
 80001de:	4b18      	ldr	r3, [pc, #96]	@ (8000240 <btld_EraseFlash+0x78>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d008      	beq.n	80001fe <btld_EraseFlash+0x36>
 80001ec:	4b14      	ldr	r3, [pc, #80]	@ (8000240 <btld_EraseFlash+0x78>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	029a      	lsls	r2, r3, #10
 80001f2:	4b14      	ldr	r3, [pc, #80]	@ (8000244 <btld_EraseFlash+0x7c>)
 80001f4:	4013      	ands	r3, r2
 80001f6:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80001fa:	0adb      	lsrs	r3, r3, #11
 80001fc:	e001      	b.n	8000202 <btld_EraseFlash+0x3a>
 80001fe:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8000202:	61bb      	str	r3, [r7, #24]

    if(status == HAL_OK)
 8000204:	7ffb      	ldrb	r3, [r7, #31]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d10e      	bne.n	8000228 <btld_EraseFlash+0x60>
    {
        //pEraseInit.Banks = FLASH_BANK_2;
        pEraseInit.NbPages = NbrOfPages;
 800020a:	69bb      	ldr	r3, [r7, #24]
 800020c:	613b      	str	r3, [r7, #16]
        //pEraseInit.Page = FLASH_PAGE_NBPERBANK - pEraseInit.NbPages;
        pEraseInit.Page = APP_ADDRESS; //FLASH_PAGE_NBPERBANK - pEraseInit.NbPages;
 800020e:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <btld_EraseFlash+0x80>)
 8000210:	60fb      	str	r3, [r7, #12]
        pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
        status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8000216:	f107 0214 	add.w	r2, r7, #20
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4611      	mov	r1, r2
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fb88 	bl	8001934 <HAL_FLASHEx_Erase>
 8000224:	4603      	mov	r3, r0
 8000226:	77fb      	strb	r3, [r7, #31]
    }

    HAL_FLASH_Lock();
 8000228:	f001 fb1e 	bl	8001868 <HAL_FLASH_Lock>

    return (status == HAL_OK) ? BL_OK : BL_ERASE_ERROR;
 800022c:	7ffb      	ldrb	r3, [r7, #31]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d101      	bne.n	8000236 <btld_EraseFlash+0x6e>
 8000232:	2300      	movs	r3, #0
 8000234:	e000      	b.n	8000238 <btld_EraseFlash+0x70>
 8000236:	2304      	movs	r3, #4
}
 8000238:	4618      	mov	r0, r3
 800023a:	3720      	adds	r7, #32
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	1fff75e0 	.word	0x1fff75e0
 8000244:	03fffc00 	.word	0x03fffc00
 8000248:	08008000 	.word	0x08008000

0800024c <btld_FlashBegin>:

/* Flash Begin ---------------------------------------------------------------*/
void btld_FlashBegin(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
    /* Reset flash destination address */
    flash_ptr = APP_ADDRESS;
 8000250:	4b03      	ldr	r3, [pc, #12]	@ (8000260 <btld_FlashBegin+0x14>)
 8000252:	4a04      	ldr	r2, [pc, #16]	@ (8000264 <btld_FlashBegin+0x18>)
 8000254:	601a      	str	r2, [r3, #0]

    /* Unlock flash */
    HAL_FLASH_Unlock();
 8000256:	f001 fae5 	bl	8001824 <HAL_FLASH_Unlock>
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000000 	.word	0x20000000
 8000264:	08008000 	.word	0x08008000

08000268 <btld_FlashEnd>:

    return BL_OK;
}

/* Finish flash programming --------------------------------------------------*/
void btld_FlashEnd(void){
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
    /* Lock flash */
    HAL_FLASH_Lock();
 800026c:	f001 fafc 	bl	8001868 <HAL_FLASH_Lock>
}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}

08000274 <btld_GetBootChecksum>:
uint8_t btld_CheckSize(uint32_t appsize){
    return ((FLASH_BASE + FLASH_SIZE - APP_ADDRESS) >= appsize) ? BL_OK : BL_SIZE_ERROR;
}

/* Verify checksum of bootloader ---------------------------------*/
uint32_t btld_GetBootChecksum(void){
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0

    uint32_t calculatedCrc = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	607b      	str	r3, [r7, #4]

    calculatedCrc = HAL_CRC_Calculate(&hcrc, (uint32_t*)BL_ADDRESS, BL_SIZE);
 800027e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000282:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8000286:	4804      	ldr	r0, [pc, #16]	@ (8000298 <btld_GetBootChecksum+0x24>)
 8000288:	f001 f92a 	bl	80014e0 <HAL_CRC_Calculate>
 800028c:	6078      	str	r0, [r7, #4]

    return calculatedCrc;
 800028e:	687b      	ldr	r3, [r7, #4]

}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000078 	.word	0x20000078

0800029c <btld_GetChecksum>:

/* Verify checksum of application located in flash ---------------------------------*/
uint32_t btld_GetChecksum(void){
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0

    uint32_t calculatedCrc = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	607b      	str	r3, [r7, #4]

    calculatedCrc = HAL_CRC_Calculate(&hcrc, (uint32_t*)APP_ADDRESS, APP_SIZE);
 80002a6:	f44f 325c 	mov.w	r2, #225280	@ 0x37000
 80002aa:	4905      	ldr	r1, [pc, #20]	@ (80002c0 <btld_GetChecksum+0x24>)
 80002ac:	4805      	ldr	r0, [pc, #20]	@ (80002c4 <btld_GetChecksum+0x28>)
 80002ae:	f001 f917 	bl	80014e0 <HAL_CRC_Calculate>
 80002b2:	6078      	str	r0, [r7, #4]

    return calculatedCrc;
 80002b4:	687b      	ldr	r3, [r7, #4]
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	08008000 	.word	0x08008000
 80002c4:	20000078 	.word	0x20000078

080002c8 <btld_CheckForApplication>:

	return returnedERR;
}

/* Check for application in user flash ---------------------------------------------*/
uint8_t btld_CheckForApplication(void){
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0

    return ( ((*(__IO uint32_t*)APP_ADDRESS) - RAM_SIZE) == 0x20000000 ) ? BL_OK : BL_NO_APP;
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <btld_CheckForApplication+0x20>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a06      	ldr	r2, [pc, #24]	@ (80002ec <btld_CheckForApplication+0x24>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	bf14      	ite	ne
 80002d6:	2301      	movne	r3, #1
 80002d8:	2300      	moveq	r3, #0
 80002da:	b2db      	uxtb	r3, r3
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	08008000 	.word	0x08008000
 80002ec:	20008000 	.word	0x20008000

080002f0 <btld_JumpToApp>:


/* Jump to application -------------------------------------------------------------*/
void btld_JumpToApp(void){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
    uint32_t  JumpAddress = *(__IO uint32_t*)(APP_ADDRESS + 4);
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <btld_JumpToApp+0x4c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	60fb      	str	r3, [r7, #12]
    pFunction Jump = (pFunction)JumpAddress;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	60bb      	str	r3, [r7, #8]


    HAL_RCC_DeInit();
 8000300:	f001 fe82 	bl	8002008 <HAL_RCC_DeInit>
    HAL_DeInit();
 8000304:	f000 fc0a 	bl	8000b1c <HAL_DeInit>

    //HAL_NVIC_DisableIRQ();

    SysTick->CTRL = 0;
 8000308:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <btld_JumpToApp+0x50>)
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 800030e:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <btld_JumpToApp+0x50>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
    SysTick->VAL  = 0;
 8000314:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <btld_JumpToApp+0x50>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]

#if (SET_VECTOR_TABLE)
    SCB->VTOR = APP_ADDRESS;
 800031a:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <btld_JumpToApp+0x54>)
 800031c:	4a0a      	ldr	r2, [pc, #40]	@ (8000348 <btld_JumpToApp+0x58>)
 800031e:	609a      	str	r2, [r3, #8]
#endif

    __set_MSP(*(__IO uint32_t*)APP_ADDRESS);
 8000320:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <btld_JumpToApp+0x58>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f383 8808 	msr	MSP, r3
}
 800032c:	bf00      	nop
    Jump();
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	4798      	blx	r3
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	08008004 	.word	0x08008004
 8000340:	e000e010 	.word	0xe000e010
 8000344:	e000ed00 	.word	0xe000ed00
 8000348:	08008000 	.word	0x08008000

0800034c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000352:	f000 fbca 	bl	8000aea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000356:	f000 f975 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035a:	f000 fa39 	bl	80007d0 <MX_GPIO_Init>
  MX_CAN1_Init();
 800035e:	f000 f9b7 	bl	80006d0 <MX_CAN1_Init>
  MX_CRC_Init();
 8000362:	f000 f9eb 	bl	800073c <MX_CRC_Init>
  MX_TIM17_Init();
 8000366:	f000 fa0b 	bl	8000780 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  /* Configura CAN RX FILTER */
  config_can_filter();
 800036a:	f000 fa6f 	bl	800084c <config_can_filter>
  /* Start CAN recieve Interrupt */
  HAL_CAN_Start(&hcan);
 800036e:	48a1      	ldr	r0, [pc, #644]	@ (80005f4 <main+0x2a8>)
 8000370:	f000 fe31 	bl	8000fd6 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000374:	2102      	movs	r1, #2
 8000376:	489f      	ldr	r0, [pc, #636]	@ (80005f4 <main+0x2a8>)
 8000378:	f000 ff41 	bl	80011fe <HAL_CAN_ActivateNotification>

  HAL_TIM_Base_Start_IT(&htim17); // 1mS
 800037c:	489e      	ldr	r0, [pc, #632]	@ (80005f8 <main+0x2ac>)
 800037e:	f002 fd05 	bl	8002d8c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if(btld_CheckForApplication()==BL_NO_APP){
 8000382:	f7ff ffa1 	bl	80002c8 <btld_CheckForApplication>
 8000386:	4603      	mov	r3, r0
 8000388:	2b01      	cmp	r3, #1
 800038a:	d102      	bne.n	8000392 <main+0x46>
	  G_loader_mode=1;
 800038c:	4b9b      	ldr	r3, [pc, #620]	@ (80005fc <main+0x2b0>)
 800038e:	2201      	movs	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */
	  /* Loader Mode */
	  if(G_loader_mode){
 8000392:	4b9a      	ldr	r3, [pc, #616]	@ (80005fc <main+0x2b0>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	f000 814a 	beq.w	8000630 <main+0x2e4>

		  /* Erase Flash */
		  if(G_flash_erase_CMD){
 800039c:	4b98      	ldr	r3, [pc, #608]	@ (8000600 <main+0x2b4>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d034      	beq.n	800040e <main+0xc2>
			  if(btld_EraseFlash()==HAL_OK){
 80003a4:	f7ff ff10 	bl	80001c8 <btld_EraseFlash>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d116      	bne.n	80003dc <main+0x90>
				  /* Erase Success */
					//Send CAN message to know we are in loader mode
					TxHeader.ExtId=TX_FEEDBACK_CANID + CANTX_SA;
 80003ae:	4b95      	ldr	r3, [pc, #596]	@ (8000604 <main+0x2b8>)
 80003b0:	f64f 6202 	movw	r2, #65026	@ 0xfe02
 80003b4:	605a      	str	r2, [r3, #4]
					TxHeader.IDE=CAN_ID_EXT;
 80003b6:	4b93      	ldr	r3, [pc, #588]	@ (8000604 <main+0x2b8>)
 80003b8:	2204      	movs	r2, #4
 80003ba:	609a      	str	r2, [r3, #8]
					TxHeader.RTR=CAN_RTR_DATA;
 80003bc:	4b91      	ldr	r3, [pc, #580]	@ (8000604 <main+0x2b8>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
					TxHeader.DLC=1;
 80003c2:	4b90      	ldr	r3, [pc, #576]	@ (8000604 <main+0x2b8>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	611a      	str	r2, [r3, #16]
					TxData[0]=0xF0;
 80003c8:	4b8f      	ldr	r3, [pc, #572]	@ (8000608 <main+0x2bc>)
 80003ca:	22f0      	movs	r2, #240	@ 0xf0
 80003cc:	701a      	strb	r2, [r3, #0]

					HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 80003ce:	4b8f      	ldr	r3, [pc, #572]	@ (800060c <main+0x2c0>)
 80003d0:	4a8d      	ldr	r2, [pc, #564]	@ (8000608 <main+0x2bc>)
 80003d2:	498c      	ldr	r1, [pc, #560]	@ (8000604 <main+0x2b8>)
 80003d4:	4887      	ldr	r0, [pc, #540]	@ (80005f4 <main+0x2a8>)
 80003d6:	f000 fe42 	bl	800105e <HAL_CAN_AddTxMessage>
 80003da:	e015      	b.n	8000408 <main+0xbc>
			  }else{
				  /* Erase failed */
					//Send CAN message to know we are in loader mode
					TxHeader.ExtId=TX_FEEDBACK_CANID + CANTX_SA;
 80003dc:	4b89      	ldr	r3, [pc, #548]	@ (8000604 <main+0x2b8>)
 80003de:	f64f 6202 	movw	r2, #65026	@ 0xfe02
 80003e2:	605a      	str	r2, [r3, #4]
					TxHeader.IDE=CAN_ID_EXT;
 80003e4:	4b87      	ldr	r3, [pc, #540]	@ (8000604 <main+0x2b8>)
 80003e6:	2204      	movs	r2, #4
 80003e8:	609a      	str	r2, [r3, #8]
					TxHeader.RTR=CAN_RTR_DATA;
 80003ea:	4b86      	ldr	r3, [pc, #536]	@ (8000604 <main+0x2b8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	60da      	str	r2, [r3, #12]
					TxHeader.DLC=1;
 80003f0:	4b84      	ldr	r3, [pc, #528]	@ (8000604 <main+0x2b8>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	611a      	str	r2, [r3, #16]
					TxData[0]=0xFF;
 80003f6:	4b84      	ldr	r3, [pc, #528]	@ (8000608 <main+0x2bc>)
 80003f8:	22ff      	movs	r2, #255	@ 0xff
 80003fa:	701a      	strb	r2, [r3, #0]

					HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 80003fc:	4b83      	ldr	r3, [pc, #524]	@ (800060c <main+0x2c0>)
 80003fe:	4a82      	ldr	r2, [pc, #520]	@ (8000608 <main+0x2bc>)
 8000400:	4980      	ldr	r1, [pc, #512]	@ (8000604 <main+0x2b8>)
 8000402:	487c      	ldr	r0, [pc, #496]	@ (80005f4 <main+0x2a8>)
 8000404:	f000 fe2b 	bl	800105e <HAL_CAN_AddTxMessage>
			  }
			  G_flash_erase_CMD=0;
 8000408:	4b7d      	ldr	r3, [pc, #500]	@ (8000600 <main+0x2b4>)
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
		  }
		  /* Run Application command */
		  if(G_run_app_CMD){
 800040e:	4b80      	ldr	r3, [pc, #512]	@ (8000610 <main+0x2c4>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <main+0xce>
			  btld_JumpToApp();
 8000416:	f7ff ff6b 	bl	80002f0 <btld_JumpToApp>
		  }
		  /* Calculate and send CRC */
		  if(G_return_CRC_CMD){
 800041a:	4b7e      	ldr	r3, [pc, #504]	@ (8000614 <main+0x2c8>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d02e      	beq.n	8000480 <main+0x134>
			  uint32_t checksum;
			  checksum=btld_GetChecksum();
 8000422:	f7ff ff3b 	bl	800029c <btld_GetChecksum>
 8000426:	6078      	str	r0, [r7, #4]

				/* Send Available flash size for application */
				TxHeader.ExtId=TX_FEEDBACK_CANID + CANTX_SA;
 8000428:	4b76      	ldr	r3, [pc, #472]	@ (8000604 <main+0x2b8>)
 800042a:	f64f 6202 	movw	r2, #65026	@ 0xfe02
 800042e:	605a      	str	r2, [r3, #4]
				TxHeader.IDE=CAN_ID_EXT;
 8000430:	4b74      	ldr	r3, [pc, #464]	@ (8000604 <main+0x2b8>)
 8000432:	2204      	movs	r2, #4
 8000434:	609a      	str	r2, [r3, #8]
				TxHeader.RTR=CAN_RTR_DATA;
 8000436:	4b73      	ldr	r3, [pc, #460]	@ (8000604 <main+0x2b8>)
 8000438:	2200      	movs	r2, #0
 800043a:	60da      	str	r2, [r3, #12]
				TxHeader.DLC=5;
 800043c:	4b71      	ldr	r3, [pc, #452]	@ (8000604 <main+0x2b8>)
 800043e:	2205      	movs	r2, #5
 8000440:	611a      	str	r2, [r3, #16]
				TxData[0]=0xF4;
 8000442:	4b71      	ldr	r3, [pc, #452]	@ (8000608 <main+0x2bc>)
 8000444:	22f4      	movs	r2, #244	@ 0xf4
 8000446:	701a      	strb	r2, [r3, #0]

				TxData[1]=(checksum & 0xFF000000)>>24;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	0e1b      	lsrs	r3, r3, #24
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4b6e      	ldr	r3, [pc, #440]	@ (8000608 <main+0x2bc>)
 8000450:	705a      	strb	r2, [r3, #1]
				TxData[2]=(checksum & 0x00FF0000)>>16;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	0c1b      	lsrs	r3, r3, #16
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b6b      	ldr	r3, [pc, #428]	@ (8000608 <main+0x2bc>)
 800045a:	709a      	strb	r2, [r3, #2]
				TxData[3]=(checksum & 0x0000FF00)>>8;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	b2da      	uxtb	r2, r3
 8000462:	4b69      	ldr	r3, [pc, #420]	@ (8000608 <main+0x2bc>)
 8000464:	70da      	strb	r2, [r3, #3]
				TxData[4]=(checksum & 0x000000FF);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	b2da      	uxtb	r2, r3
 800046a:	4b67      	ldr	r3, [pc, #412]	@ (8000608 <main+0x2bc>)
 800046c:	711a      	strb	r2, [r3, #4]
				/*TxData[1]=(~checksum & 0xFF000000)>>24;
				TxData[2]=(~checksum & 0x00FF0000)>>16;
				TxData[3]=(~checksum & 0x0000FF00)>>8;
				TxData[4]=(~checksum & 0x000000FF);*/

				HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 800046e:	4b67      	ldr	r3, [pc, #412]	@ (800060c <main+0x2c0>)
 8000470:	4a65      	ldr	r2, [pc, #404]	@ (8000608 <main+0x2bc>)
 8000472:	4964      	ldr	r1, [pc, #400]	@ (8000604 <main+0x2b8>)
 8000474:	485f      	ldr	r0, [pc, #380]	@ (80005f4 <main+0x2a8>)
 8000476:	f000 fdf2 	bl	800105e <HAL_CAN_AddTxMessage>

				G_return_CRC_CMD=0;
 800047a:	4b66      	ldr	r3, [pc, #408]	@ (8000614 <main+0x2c8>)
 800047c:	2200      	movs	r2, #0
 800047e:	701a      	strb	r2, [r3, #0]
		  }
			/* Calculate and send CRC */
			if (G_return_BOOT_CRC_CMD) {
 8000480:	4b65      	ldr	r3, [pc, #404]	@ (8000618 <main+0x2cc>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d02e      	beq.n	80004e6 <main+0x19a>
				uint32_t checksum;
				checksum = btld_GetBootChecksum();
 8000488:	f7ff fef4 	bl	8000274 <btld_GetBootChecksum>
 800048c:	6038      	str	r0, [r7, #0]

				/* Send Achecksu, */
				TxHeader.ExtId = TX_FEEDBACK_CANID + CANTX_SA;
 800048e:	4b5d      	ldr	r3, [pc, #372]	@ (8000604 <main+0x2b8>)
 8000490:	f64f 6202 	movw	r2, #65026	@ 0xfe02
 8000494:	605a      	str	r2, [r3, #4]
				TxHeader.IDE = CAN_ID_EXT;
 8000496:	4b5b      	ldr	r3, [pc, #364]	@ (8000604 <main+0x2b8>)
 8000498:	2204      	movs	r2, #4
 800049a:	609a      	str	r2, [r3, #8]
				TxHeader.RTR = CAN_RTR_DATA;
 800049c:	4b59      	ldr	r3, [pc, #356]	@ (8000604 <main+0x2b8>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
				TxHeader.DLC = 5;
 80004a2:	4b58      	ldr	r3, [pc, #352]	@ (8000604 <main+0x2b8>)
 80004a4:	2205      	movs	r2, #5
 80004a6:	611a      	str	r2, [r3, #16]
				TxData[0] = 0x0F;
 80004a8:	4b57      	ldr	r3, [pc, #348]	@ (8000608 <main+0x2bc>)
 80004aa:	220f      	movs	r2, #15
 80004ac:	701a      	strb	r2, [r3, #0]

				TxData[1] = (checksum & 0xFF000000) >> 24;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	0e1b      	lsrs	r3, r3, #24
 80004b2:	b2da      	uxtb	r2, r3
 80004b4:	4b54      	ldr	r3, [pc, #336]	@ (8000608 <main+0x2bc>)
 80004b6:	705a      	strb	r2, [r3, #1]
				TxData[2] = (checksum & 0x00FF0000) >> 16;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	0c1b      	lsrs	r3, r3, #16
 80004bc:	b2da      	uxtb	r2, r3
 80004be:	4b52      	ldr	r3, [pc, #328]	@ (8000608 <main+0x2bc>)
 80004c0:	709a      	strb	r2, [r3, #2]
				TxData[3] = (checksum & 0x0000FF00) >> 8;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	0a1b      	lsrs	r3, r3, #8
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	4b4f      	ldr	r3, [pc, #316]	@ (8000608 <main+0x2bc>)
 80004ca:	70da      	strb	r2, [r3, #3]
				TxData[4] = (checksum & 0x000000FF);
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	4b4d      	ldr	r3, [pc, #308]	@ (8000608 <main+0x2bc>)
 80004d2:	711a      	strb	r2, [r3, #4]

				HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80004d4:	4b4d      	ldr	r3, [pc, #308]	@ (800060c <main+0x2c0>)
 80004d6:	4a4c      	ldr	r2, [pc, #304]	@ (8000608 <main+0x2bc>)
 80004d8:	494a      	ldr	r1, [pc, #296]	@ (8000604 <main+0x2b8>)
 80004da:	4846      	ldr	r0, [pc, #280]	@ (80005f4 <main+0x2a8>)
 80004dc:	f000 fdbf 	bl	800105e <HAL_CAN_AddTxMessage>

				G_return_BOOT_CRC_CMD = 0;
 80004e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000618 <main+0x2cc>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
			}
			if (G_start_flash_CMD) {
 80004e6:	4b4d      	ldr	r3, [pc, #308]	@ (800061c <main+0x2d0>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d020      	beq.n	8000530 <main+0x1e4>
				btld_FlashBegin();
 80004ee:	f7ff fead 	bl	800024c <btld_FlashBegin>
				G_FlashInProgress = 1;
 80004f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000620 <main+0x2d4>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
			  // request next WORD
			  /* Send success */
			  TxHeader.ExtId=TX_FEEDBACK_CANID + CANTX_SA;
 80004f8:	4b42      	ldr	r3, [pc, #264]	@ (8000604 <main+0x2b8>)
 80004fa:	f64f 6202 	movw	r2, #65026	@ 0xfe02
 80004fe:	605a      	str	r2, [r3, #4]
			  TxHeader.IDE=CAN_ID_EXT;
 8000500:	4b40      	ldr	r3, [pc, #256]	@ (8000604 <main+0x2b8>)
 8000502:	2204      	movs	r2, #4
 8000504:	609a      	str	r2, [r3, #8]
			  TxHeader.RTR=CAN_RTR_DATA;
 8000506:	4b3f      	ldr	r3, [pc, #252]	@ (8000604 <main+0x2b8>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
			  TxHeader.DLC=2;
 800050c:	4b3d      	ldr	r3, [pc, #244]	@ (8000604 <main+0x2b8>)
 800050e:	2202      	movs	r2, #2
 8000510:	611a      	str	r2, [r3, #16]
			  TxData[0]=0xF5;
 8000512:	4b3d      	ldr	r3, [pc, #244]	@ (8000608 <main+0x2bc>)
 8000514:	22f5      	movs	r2, #245	@ 0xf5
 8000516:	701a      	strb	r2, [r3, #0]
			  TxData[1]=0xFF;	//Success
 8000518:	4b3b      	ldr	r3, [pc, #236]	@ (8000608 <main+0x2bc>)
 800051a:	22ff      	movs	r2, #255	@ 0xff
 800051c:	705a      	strb	r2, [r3, #1]

			  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 800051e:	4b3b      	ldr	r3, [pc, #236]	@ (800060c <main+0x2c0>)
 8000520:	4a39      	ldr	r2, [pc, #228]	@ (8000608 <main+0x2bc>)
 8000522:	4938      	ldr	r1, [pc, #224]	@ (8000604 <main+0x2b8>)
 8000524:	4833      	ldr	r0, [pc, #204]	@ (80005f4 <main+0x2a8>)
 8000526:	f000 fd9a 	bl	800105e <HAL_CAN_AddTxMessage>

			  G_start_flash_CMD=0;
 800052a:	4b3c      	ldr	r3, [pc, #240]	@ (800061c <main+0x2d0>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
		  	}
		  if (G_end_flash_CMD && G_FlashInProgress){
 8000530:	4b3c      	ldr	r3, [pc, #240]	@ (8000624 <main+0x2d8>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d024      	beq.n	8000582 <main+0x236>
 8000538:	4b39      	ldr	r3, [pc, #228]	@ (8000620 <main+0x2d4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d020      	beq.n	8000582 <main+0x236>

			  btld_FlashEnd();
 8000540:	f7ff fe92 	bl	8000268 <btld_FlashEnd>
			  G_FlashInProgress=0;
 8000544:	4b36      	ldr	r3, [pc, #216]	@ (8000620 <main+0x2d4>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
			  G_end_flash_CMD=0;
 800054a:	4b36      	ldr	r3, [pc, #216]	@ (8000624 <main+0x2d8>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]

			  // request next WORD
			  /* Send success */
			  TxHeader.ExtId=TX_FEEDBACK_CANID + CANTX_SA;
 8000550:	4b2c      	ldr	r3, [pc, #176]	@ (8000604 <main+0x2b8>)
 8000552:	f64f 6202 	movw	r2, #65026	@ 0xfe02
 8000556:	605a      	str	r2, [r3, #4]
			  TxHeader.IDE=CAN_ID_EXT;
 8000558:	4b2a      	ldr	r3, [pc, #168]	@ (8000604 <main+0x2b8>)
 800055a:	2204      	movs	r2, #4
 800055c:	609a      	str	r2, [r3, #8]
			  TxHeader.RTR=CAN_RTR_DATA;
 800055e:	4b29      	ldr	r3, [pc, #164]	@ (8000604 <main+0x2b8>)
 8000560:	2200      	movs	r2, #0
 8000562:	60da      	str	r2, [r3, #12]
			  TxHeader.DLC=2;
 8000564:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <main+0x2b8>)
 8000566:	2202      	movs	r2, #2
 8000568:	611a      	str	r2, [r3, #16]
			  TxData[0]=0xF7;
 800056a:	4b27      	ldr	r3, [pc, #156]	@ (8000608 <main+0x2bc>)
 800056c:	22f7      	movs	r2, #247	@ 0xf7
 800056e:	701a      	strb	r2, [r3, #0]
			  TxData[1]=0xFF;	//Success
 8000570:	4b25      	ldr	r3, [pc, #148]	@ (8000608 <main+0x2bc>)
 8000572:	22ff      	movs	r2, #255	@ 0xff
 8000574:	705a      	strb	r2, [r3, #1]

			  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 8000576:	4b25      	ldr	r3, [pc, #148]	@ (800060c <main+0x2c0>)
 8000578:	4a23      	ldr	r2, [pc, #140]	@ (8000608 <main+0x2bc>)
 800057a:	4922      	ldr	r1, [pc, #136]	@ (8000604 <main+0x2b8>)
 800057c:	481d      	ldr	r0, [pc, #116]	@ (80005f4 <main+0x2a8>)
 800057e:	f000 fd6e 	bl	800105e <HAL_CAN_AddTxMessage>
		  }


			// LED CONTROL
			if (G_LedUpdate) {
 8000582:	4b29      	ldr	r3, [pc, #164]	@ (8000628 <main+0x2dc>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	f43f af03 	beq.w	8000392 <main+0x46>
				// every 500mS update the LED Status
				static uint8_t led_state = 1;

				switch (led_state) {
 800058c:	4b27      	ldr	r3, [pc, #156]	@ (800062c <main+0x2e0>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b03      	cmp	r3, #3
 8000592:	d020      	beq.n	80005d6 <main+0x28a>
 8000594:	2b03      	cmp	r3, #3
 8000596:	dc28      	bgt.n	80005ea <main+0x29e>
 8000598:	2b01      	cmp	r3, #1
 800059a:	d002      	beq.n	80005a2 <main+0x256>
 800059c:	2b02      	cmp	r3, #2
 800059e:	d00d      	beq.n	80005bc <main+0x270>
				case 3:
					HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin,0);
					led_state = 1;
					break;
				default:
					break;
 80005a0:	e023      	b.n	80005ea <main+0x29e>
					HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin,1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2108      	movs	r1, #8
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005aa:	f001 fcb1 	bl	8001f10 <HAL_GPIO_WritePin>
					led_state++;
 80005ae:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <main+0x2e0>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	3301      	adds	r3, #1
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <main+0x2e0>)
 80005b8:	701a      	strb	r2, [r3, #0]
					break;
 80005ba:	e017      	b.n	80005ec <main+0x2a0>
					HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin,0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2108      	movs	r1, #8
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c4:	f001 fca4 	bl	8001f10 <HAL_GPIO_WritePin>
					led_state++;
 80005c8:	4b18      	ldr	r3, [pc, #96]	@ (800062c <main+0x2e0>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b16      	ldr	r3, [pc, #88]	@ (800062c <main+0x2e0>)
 80005d2:	701a      	strb	r2, [r3, #0]
					break;
 80005d4:	e00a      	b.n	80005ec <main+0x2a0>
					HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin,0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2108      	movs	r1, #8
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f001 fc97 	bl	8001f10 <HAL_GPIO_WritePin>
					led_state = 1;
 80005e2:	4b12      	ldr	r3, [pc, #72]	@ (800062c <main+0x2e0>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	701a      	strb	r2, [r3, #0]
					break;
 80005e8:	e000      	b.n	80005ec <main+0x2a0>
					break;
 80005ea:	bf00      	nop
				}
				G_LedUpdate=0;
 80005ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <main+0x2dc>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
 80005f2:	e6ce      	b.n	8000392 <main+0x46>
 80005f4:	20000050 	.word	0x20000050
 80005f8:	2000009c 	.word	0x2000009c
 80005fc:	200000ec 	.word	0x200000ec
 8000600:	200000ed 	.word	0x200000ed
 8000604:	200000f8 	.word	0x200000f8
 8000608:	20000110 	.word	0x20000110
 800060c:	20000118 	.word	0x20000118
 8000610:	200000ee 	.word	0x200000ee
 8000614:	200000ef 	.word	0x200000ef
 8000618:	200000f0 	.word	0x200000f0
 800061c:	200000f1 	.word	0x200000f1
 8000620:	200000f3 	.word	0x200000f3
 8000624:	200000f2 	.word	0x200000f2
 8000628:	200000f4 	.word	0x200000f4
 800062c:	20000004 	.word	0x20000004
			}


	  }else{
		  /* Jump to app if timeout*/
		  if(G_mSCounter>50){
 8000630:	4b03      	ldr	r3, [pc, #12]	@ (8000640 <main+0x2f4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b32      	cmp	r3, #50	@ 0x32
 8000636:	f67f aeac 	bls.w	8000392 <main+0x46>
			  btld_JumpToApp();
 800063a:	f7ff fe59 	bl	80002f0 <btld_JumpToApp>
	  if(G_loader_mode){
 800063e:	e6a8      	b.n	8000392 <main+0x46>
 8000640:	200000e8 	.word	0x200000e8

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b096      	sub	sp, #88	@ 0x58
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2244      	movs	r2, #68	@ 0x44
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fca4 	bl	8002fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000666:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800066a:	f001 fc77 	bl	8001f5c <HAL_PWREx_ControlVoltageScaling>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000674:	f000 f920 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000678:	2310      	movs	r3, #16
 800067a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000684:	2360      	movs	r3, #96	@ 0x60
 8000686:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fd5b 	bl	800214c <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800069c:	f000 f90c 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 f923 	bl	8002904 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006c4:	f000 f8f8 	bl	80008b8 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3758      	adds	r7, #88	@ 0x58
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan.Instance = CAN1;
 80006d4:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_CAN1_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	@ (8000738 <MX_CAN1_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_CAN1_Init+0x64>)
 80006dc:	2204      	movs	r2, #4
 80006de:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_CAN1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006e6:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <MX_CAN1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_CAN1_Init+0x64>)
 80006ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006f2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_CAN1_Init+0x64>)
 80006f6:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 80006fa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <MX_CAN1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_CAN1_Init+0x64>)
 8000704:	2201      	movs	r2, #1
 8000706:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <MX_CAN1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_CAN1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <MX_CAN1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_CAN1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_CAN1_Init+0x64>)
 8000722:	f000 fa93 	bl	8000c4c <HAL_CAN_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800072c:	f000 f8c4 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000050 	.word	0x20000050
 8000738:	40006400 	.word	0x40006400

0800073c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000740:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000742:	4a0e      	ldr	r2, [pc, #56]	@ (800077c <MX_CRC_Init+0x40>)
 8000744:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000748:	2200      	movs	r2, #0
 800074a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <MX_CRC_Init+0x3c>)
 800074e:	2200      	movs	r2, #0
 8000750:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_CRC_Init+0x3c>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000760:	2201      	movs	r2, #1
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000766:	f000 fe57 	bl	8001418 <HAL_CRC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000770:	f000 f8a2 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000078 	.word	0x20000078
 800077c:	40023000 	.word	0x40023000

08000780 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_TIM17_Init+0x48>)
 8000786:	4a11      	ldr	r2, [pc, #68]	@ (80007cc <MX_TIM17_Init+0x4c>)
 8000788:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_TIM17_Init+0x48>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000790:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <MX_TIM17_Init+0x48>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 32000;
 8000796:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_TIM17_Init+0x48>)
 8000798:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800079c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <MX_TIM17_Init+0x48>)
 80007a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007a4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_TIM17_Init+0x48>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_TIM17_Init+0x48>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_TIM17_Init+0x48>)
 80007b4:	f002 fa92 	bl	8002cdc <HAL_TIM_Base_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80007be:	f000 f87b 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000009c 	.word	0x2000009c
 80007cc:	40014800 	.word	0x40014800

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <MX_GPIO_Init+0x78>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a17      	ldr	r2, [pc, #92]	@ (8000848 <MX_GPIO_Init+0x78>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_GPIO_Init+0x78>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_GPIO_Init+0x78>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a11      	ldr	r2, [pc, #68]	@ (8000848 <MX_GPIO_Init+0x78>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_GPIO_Init+0x78>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081e:	f001 fb77 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8000822:	2308      	movs	r3, #8
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083c:	f001 f9be 	bl	8001bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000

0800084c <config_can_filter>:
	}

}


void config_can_filter(void){
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	@ 0x30
 8000850:	af00      	add	r7, sp, #0
   CAN_FilterTypeDef sFilterConfig;

   	   	   	   	   	   	   	  /* Leave mask bits for different messages commands
   	   	   	   	   	   	   	  |  	  	  	  	  	  	  	  	  	  	  	  	 */
   uint32_t filterMask=	RXFILTERMASK;
 8000852:	f46f 437f 	mvn.w	r3, #65280	@ 0xff00
 8000856:	62fb      	str	r3, [r7, #44]	@ 0x2c
   uint32_t filterID=	RXFILTERID; // Only accept bootloader CAN message ID
 8000858:	f64f 7301 	movw	r3, #65281	@ 0xff01
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /*##-2- Configure the CAN Filter ###########################################*/
  //sFilterConfig.FilterNumber = 0;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = filterID >> 13;
 8000866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000868:	0b5b      	lsrs	r3, r3, #13
 800086a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = (0x00FF & (filterID << 3)) | (1 << 2);
 800086c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 8000878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800087a:	0b5b      	lsrs	r3, r3, #13
 800087c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = (0x00FF & (filterMask << 3)) | (1 << 2);
 800087e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterBank = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	@ (80008b4 <config_can_filter+0x68>)
 800089c:	f000 fad1 	bl	8000e42 <HAL_CAN_ConfigFilter>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <config_can_filter+0x5e>
  {
    Error_Handler();
 80008a6:	f000 f807 	bl	80008b8 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3730      	adds	r7, #48	@ 0x30
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000050 	.word	0x20000050

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <HAL_MspInit+0x44>)
 80008cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000908 <HAL_MspInit+0x44>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <HAL_MspInit+0x44>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <HAL_MspInit+0x44>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e6:	4a08      	ldr	r2, [pc, #32]	@ (8000908 <HAL_MspInit+0x44>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <HAL_MspInit+0x44>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	@ 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a17      	ldr	r2, [pc, #92]	@ (8000988 <HAL_CAN_MspInit+0x7c>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d128      	bne.n	8000980 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800092e:	4b17      	ldr	r3, [pc, #92]	@ (800098c <HAL_CAN_MspInit+0x80>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000932:	4a16      	ldr	r2, [pc, #88]	@ (800098c <HAL_CAN_MspInit+0x80>)
 8000934:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000938:	6593      	str	r3, [r2, #88]	@ 0x58
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <HAL_CAN_MspInit+0x80>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <HAL_CAN_MspInit+0x80>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	4a10      	ldr	r2, [pc, #64]	@ (800098c <HAL_CAN_MspInit+0x80>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <HAL_CAN_MspInit+0x80>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800095e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000970:	2309      	movs	r3, #9
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <HAL_CAN_MspInit+0x84>)
 800097c:	f001 f91e 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000980:	bf00      	nop
 8000982:	3728      	adds	r7, #40	@ 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40006400 	.word	0x40006400
 800098c:	40021000 	.word	0x40021000
 8000990:	48000400 	.word	0x48000400

08000994 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <HAL_CRC_MspInit+0x38>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d10b      	bne.n	80009be <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <HAL_CRC_MspInit+0x3c>)
 80009a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009aa:	4a09      	ldr	r2, [pc, #36]	@ (80009d0 <HAL_CRC_MspInit+0x3c>)
 80009ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80009b2:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <HAL_CRC_MspInit+0x3c>)
 80009b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023000 	.word	0x40023000
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <HAL_TIM_Base_MspInit+0x38>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d10b      	bne.n	80009fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <HAL_TIM_Base_MspInit+0x3c>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ea:	4a09      	ldr	r2, [pc, #36]	@ (8000a10 <HAL_TIM_Base_MspInit+0x3c>)
 80009ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009f2:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <HAL_TIM_Base_MspInit+0x3c>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40014800 	.word	0x40014800
 8000a10:	40021000 	.word	0x40021000

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <NMI_Handler+0x4>

08000a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6a:	f000 f8cf 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a9c:	f7ff ffea 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	@ (8000ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <LoopForever+0xe>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae4 <LoopForever+0x16>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f002 fa73 	bl	8002fb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aca:	f7ff fc3f 	bl	800034c <main>

08000ace <LoopForever>:

LoopForever:
    b LoopForever
 8000ace:	e7fe      	b.n	8000ace <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000adc:	08003058 	.word	0x08003058
  ldr r2, =_sbss
 8000ae0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000ae4:	20000120 	.word	0x20000120

08000ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC1_2_IRQHandler>

08000aea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 fc5b 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afa:	200f      	movs	r0, #15
 8000afc:	f000 f84a 	bl	8000b94 <HAL_InitTick>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	71fb      	strb	r3, [r7, #7]
 8000b0a:	e001      	b.n	8000b10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b0c:	f7ff feda 	bl	80008c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000b20:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <HAL_DeInit+0x64>)
 8000b22:	f04f 32ff 	mov.w	r2, #4294967295
 8000b26:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b28:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <HAL_DeInit+0x64>)
 8000b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 8000b30:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <HAL_DeInit+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b36:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_DeInit+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  __HAL_RCC_APB2_FORCE_RESET();
 8000b3c:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <HAL_DeInit+0x64>)
 8000b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b42:	641a      	str	r2, [r3, #64]	@ 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8000b44:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <HAL_DeInit+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	641a      	str	r2, [r3, #64]	@ 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <HAL_DeInit+0x64>)
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <HAL_DeInit+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	@ 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 8000b58:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_DeInit+0x64>)
 8000b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000b60:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <HAL_DeInit+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	62da      	str	r2, [r3, #44]	@ 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_DeInit+0x64>)
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000b6e:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <HAL_DeInit+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	631a      	str	r2, [r3, #48]	@ 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000b74:	f000 f806 	bl	8000b84 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000

08000b84 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba0:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <HAL_InitTick+0x6c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d023      	beq.n	8000bf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ba8:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <HAL_InitTick+0x70>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <HAL_InitTick+0x6c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fc1d 	bl	80013fe <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10f      	bne.n	8000bea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d809      	bhi.n	8000be4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f000 fbf5 	bl	80013c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <HAL_InitTick+0x74>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e007      	b.n	8000bf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e004      	b.n	8000bf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e001      	b.n	8000bf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000010 	.word	0x20000010
 8000c04:	20000008 	.word	0x20000008
 8000c08:	2000000c 	.word	0x2000000c

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000010 	.word	0x20000010
 8000c30:	2000011c 	.word	0x2000011c

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	2000011c 	.word	0x2000011c

08000c4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d101      	bne.n	8000c5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e0ed      	b.n	8000e3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fe4e 	bl	800090c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f042 0201 	orr.w	r2, r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c80:	f7ff ffd8 	bl	8000c34 <HAL_GetTick>
 8000c84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c86:	e012      	b.n	8000cae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c88:	f7ff ffd4 	bl	8000c34 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b0a      	cmp	r3, #10
 8000c94:	d90b      	bls.n	8000cae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2205      	movs	r2, #5
 8000ca6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e0c5      	b.n	8000e3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0e5      	beq.n	8000c88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 0202 	bic.w	r2, r2, #2
 8000cca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ccc:	f7ff ffb2 	bl	8000c34 <HAL_GetTick>
 8000cd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cd2:	e012      	b.n	8000cfa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cd4:	f7ff ffae 	bl	8000c34 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b0a      	cmp	r3, #10
 8000ce0:	d90b      	bls.n	8000cfa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2205      	movs	r2, #5
 8000cf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e09f      	b.n	8000e3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1e5      	bne.n	8000cd4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7e1b      	ldrb	r3, [r3, #24]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d108      	bne.n	8000d22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	e007      	b.n	8000d32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7e5b      	ldrb	r3, [r3, #25]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d108      	bne.n	8000d4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e007      	b.n	8000d5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7e9b      	ldrb	r3, [r3, #26]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d108      	bne.n	8000d76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0220 	orr.w	r2, r2, #32
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	e007      	b.n	8000d86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 0220 	bic.w	r2, r2, #32
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7edb      	ldrb	r3, [r3, #27]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d108      	bne.n	8000da0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0210 	bic.w	r2, r2, #16
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	e007      	b.n	8000db0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0210 	orr.w	r2, r2, #16
 8000dae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7f1b      	ldrb	r3, [r3, #28]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d108      	bne.n	8000dca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0208 	orr.w	r2, r2, #8
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	e007      	b.n	8000dda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0208 	bic.w	r2, r2, #8
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7f5b      	ldrb	r3, [r3, #29]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d108      	bne.n	8000df4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f042 0204 	orr.w	r2, r2, #4
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e007      	b.n	8000e04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0204 	bic.w	r2, r2, #4
 8000e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	431a      	orrs	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	ea42 0103 	orr.w	r1, r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	1e5a      	subs	r2, r3, #1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b087      	sub	sp, #28
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e58:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e5a:	7cfb      	ldrb	r3, [r7, #19]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d003      	beq.n	8000e68 <HAL_CAN_ConfigFilter+0x26>
 8000e60:	7cfb      	ldrb	r3, [r7, #19]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	f040 80aa 	bne.w	8000fbc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e6e:	f043 0201 	orr.w	r2, r3, #1
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	f003 031f 	and.w	r3, r3, #31
 8000e80:	2201      	movs	r2, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d123      	bne.n	8000eea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	401a      	ands	r2, r3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ec4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3248      	adds	r2, #72	@ 0x48
 8000eca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ede:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ee0:	6979      	ldr	r1, [r7, #20]
 8000ee2:	3348      	adds	r3, #72	@ 0x48
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	440b      	add	r3, r1
 8000ee8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d122      	bne.n	8000f38 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	431a      	orrs	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3248      	adds	r2, #72	@ 0x48
 8000f18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f2e:	6979      	ldr	r1, [r7, #20]
 8000f30:	3348      	adds	r3, #72	@ 0x48
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	440b      	add	r3, r1
 8000f36:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d109      	bne.n	8000f54 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000f52:	e007      	b.n	8000f64 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d109      	bne.n	8000f80 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000f7e:	e007      	b.n	8000f90 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d107      	bne.n	8000fa8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000fae:	f023 0201 	bic.w	r2, r3, #1
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e006      	b.n	8000fca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
  }
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d12e      	bne.n	8001048 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2202      	movs	r2, #2
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0201 	bic.w	r2, r2, #1
 8001000:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001002:	f7ff fe17 	bl	8000c34 <HAL_GetTick>
 8001006:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001008:	e012      	b.n	8001030 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800100a:	f7ff fe13 	bl	8000c34 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b0a      	cmp	r3, #10
 8001016:	d90b      	bls.n	8001030 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2205      	movs	r2, #5
 8001028:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e012      	b.n	8001056 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1e5      	bne.n	800100a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	e006      	b.n	8001056 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
  }
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800105e:	b480      	push	{r7}
 8001060:	b089      	sub	sp, #36	@ 0x24
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001072:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800107c:	7ffb      	ldrb	r3, [r7, #31]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d003      	beq.n	800108a <HAL_CAN_AddTxMessage+0x2c>
 8001082:	7ffb      	ldrb	r3, [r7, #31]
 8001084:	2b02      	cmp	r3, #2
 8001086:	f040 80ad 	bne.w	80011e4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10a      	bne.n	80010aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800109a:	2b00      	cmp	r3, #0
 800109c:	d105      	bne.n	80010aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 8095 	beq.w	80011d4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	0e1b      	lsrs	r3, r3, #24
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010b4:	2201      	movs	r2, #1
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	409a      	lsls	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10d      	bne.n	80010e2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010d0:	68f9      	ldr	r1, [r7, #12]
 80010d2:	6809      	ldr	r1, [r1, #0]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3318      	adds	r3, #24
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	440b      	add	r3, r1
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e00f      	b.n	8001102 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010ec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010f2:	68f9      	ldr	r1, [r7, #12]
 80010f4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010f6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3318      	adds	r3, #24
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	440b      	add	r3, r1
 8001100:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6819      	ldr	r1, [r3, #0]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3318      	adds	r3, #24
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	440b      	add	r3, r1
 8001112:	3304      	adds	r3, #4
 8001114:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	7d1b      	ldrb	r3, [r3, #20]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d111      	bne.n	8001142 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3318      	adds	r3, #24
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	4413      	add	r3, r2
 800112a:	3304      	adds	r3, #4
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	6811      	ldr	r1, [r2, #0]
 8001132:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3318      	adds	r3, #24
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	440b      	add	r3, r1
 800113e:	3304      	adds	r3, #4
 8001140:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3307      	adds	r3, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	061a      	lsls	r2, r3, #24
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3306      	adds	r3, #6
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	041b      	lsls	r3, r3, #16
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3305      	adds	r3, #5
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	4313      	orrs	r3, r2
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	3204      	adds	r2, #4
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	4610      	mov	r0, r2
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	6811      	ldr	r1, [r2, #0]
 800116a:	ea43 0200 	orr.w	r2, r3, r0
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	440b      	add	r3, r1
 8001174:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001178:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3303      	adds	r3, #3
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	061a      	lsls	r2, r3, #24
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3302      	adds	r3, #2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	041b      	lsls	r3, r3, #16
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3301      	adds	r3, #1
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	4313      	orrs	r3, r2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	4610      	mov	r0, r2
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	6811      	ldr	r1, [r2, #0]
 80011a0:	ea43 0200 	orr.w	r2, r3, r0
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	440b      	add	r3, r1
 80011aa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80011ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3318      	adds	r3, #24
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	4413      	add	r3, r2
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	6811      	ldr	r1, [r2, #0]
 80011c2:	f043 0201 	orr.w	r2, r3, #1
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3318      	adds	r3, #24
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	440b      	add	r3, r1
 80011ce:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	e00e      	b.n	80011f2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e006      	b.n	80011f2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
  }
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011fe:	b480      	push	{r7}
 8001200:	b085      	sub	sp, #20
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800120e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d002      	beq.n	800121c <HAL_CAN_ActivateNotification+0x1e>
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d109      	bne.n	8001230 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6959      	ldr	r1, [r3, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	e006      	b.n	800123e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001234:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
  }
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	@ (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	@ (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	@ 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	@ 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff47 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff5c 	bl	8001294 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff8e 	bl	8001304 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffb0 	bl	800136c <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e054      	b.n	80014d4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7f5b      	ldrb	r3, [r3, #29]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d105      	bne.n	8001440 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff faaa 	bl	8000994 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2202      	movs	r2, #2
 8001444:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	791b      	ldrb	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10c      	bne.n	8001468 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a22      	ldr	r2, [pc, #136]	@ (80014dc <HAL_CRC_Init+0xc4>)
 8001454:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0218 	bic.w	r2, r2, #24
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	e00c      	b.n	8001482 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6899      	ldr	r1, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	461a      	mov	r2, r3
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f948 	bl	8001708 <HAL_CRCEx_Polynomial_Set>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e028      	b.n	80014d4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	795b      	ldrb	r3, [r3, #5]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d105      	bne.n	8001496 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f04f 32ff 	mov.w	r2, #4294967295
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	e004      	b.n	80014a0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6912      	ldr	r2, [r2, #16]
 800149e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699a      	ldr	r2, [r3, #24]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	04c11db7 	.word	0x04c11db7

080014e0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2202      	movs	r2, #2
 80014f4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0201 	orr.w	r2, r2, #1
 8001504:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d006      	beq.n	800151c <HAL_CRC_Calculate+0x3c>
 800150e:	2b03      	cmp	r3, #3
 8001510:	d829      	bhi.n	8001566 <HAL_CRC_Calculate+0x86>
 8001512:	2b01      	cmp	r3, #1
 8001514:	d019      	beq.n	800154a <HAL_CRC_Calculate+0x6a>
 8001516:	2b02      	cmp	r3, #2
 8001518:	d01e      	beq.n	8001558 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800151a:	e024      	b.n	8001566 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e00a      	b.n	8001538 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	441a      	add	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d3f0      	bcc.n	8001522 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	613b      	str	r3, [r7, #16]
      break;
 8001548:	e00e      	b.n	8001568 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 f812 	bl	8001578 <CRC_Handle_8>
 8001554:	6138      	str	r0, [r7, #16]
      break;
 8001556:	e007      	b.n	8001568 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 f899 	bl	8001694 <CRC_Handle_16>
 8001562:	6138      	str	r0, [r7, #16]
      break;
 8001564:	e000      	b.n	8001568 <HAL_CRC_Calculate+0x88>
      break;
 8001566:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2201      	movs	r2, #1
 800156c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800156e:	693b      	ldr	r3, [r7, #16]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	@ 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	e023      	b.n	80015d2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	4413      	add	r3, r2
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	3301      	adds	r3, #1
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	440b      	add	r3, r1
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80015a4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	440b      	add	r3, r1
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80015b4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	3303      	adds	r3, #3
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	440b      	add	r3, r1
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80015c8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80015ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	3301      	adds	r3, #1
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d3d6      	bcc.n	800158a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d04d      	beq.n	8001682 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d107      	bne.n	8001600 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	4413      	add	r3, r2
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d116      	bne.n	8001638 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	4413      	add	r3, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	3301      	adds	r3, #1
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	440b      	add	r3, r1
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21b      	sxth	r3, r3
 800162a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	8b7a      	ldrh	r2, [r7, #26]
 8001636:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b03      	cmp	r3, #3
 8001640:	d11f      	bne.n	8001682 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	4413      	add	r3, r2
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	3301      	adds	r3, #1
 8001656:	68b9      	ldr	r1, [r7, #8]
 8001658:	440b      	add	r3, r1
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b21b      	sxth	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b21b      	sxth	r3, r3
 8001662:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	8b7a      	ldrh	r2, [r7, #26]
 800166e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	4413      	add	r3, r2
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3724      	adds	r7, #36	@ 0x24
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	e013      	b.n	80016ce <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	4413      	add	r3, r2
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	041a      	lsls	r2, r3, #16
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	3302      	adds	r3, #2
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	440b      	add	r3, r1
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	4619      	mov	r1, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3e6      	bcc.n	80016a6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	4413      	add	r3, r2
 80016f0:	881a      	ldrh	r2, [r3, #0]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001718:	231f      	movs	r3, #31
 800171a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	75fb      	strb	r3, [r7, #23]
 800172a:	e063      	b.n	80017f4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800172c:	bf00      	nop
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1e5a      	subs	r2, r3, #1
 8001732:	613a      	str	r2, [r7, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d009      	beq.n	800174c <HAL_CRCEx_Polynomial_Set+0x44>
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b18      	cmp	r3, #24
 8001750:	d846      	bhi.n	80017e0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001752:	a201      	add	r2, pc, #4	@ (adr r2, 8001758 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	080017e7 	.word	0x080017e7
 800175c:	080017e1 	.word	0x080017e1
 8001760:	080017e1 	.word	0x080017e1
 8001764:	080017e1 	.word	0x080017e1
 8001768:	080017e1 	.word	0x080017e1
 800176c:	080017e1 	.word	0x080017e1
 8001770:	080017e1 	.word	0x080017e1
 8001774:	080017e1 	.word	0x080017e1
 8001778:	080017d5 	.word	0x080017d5
 800177c:	080017e1 	.word	0x080017e1
 8001780:	080017e1 	.word	0x080017e1
 8001784:	080017e1 	.word	0x080017e1
 8001788:	080017e1 	.word	0x080017e1
 800178c:	080017e1 	.word	0x080017e1
 8001790:	080017e1 	.word	0x080017e1
 8001794:	080017e1 	.word	0x080017e1
 8001798:	080017c9 	.word	0x080017c9
 800179c:	080017e1 	.word	0x080017e1
 80017a0:	080017e1 	.word	0x080017e1
 80017a4:	080017e1 	.word	0x080017e1
 80017a8:	080017e1 	.word	0x080017e1
 80017ac:	080017e1 	.word	0x080017e1
 80017b0:	080017e1 	.word	0x080017e1
 80017b4:	080017e1 	.word	0x080017e1
 80017b8:	080017bd 	.word	0x080017bd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d913      	bls.n	80017ea <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017c6:	e010      	b.n	80017ea <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2b07      	cmp	r3, #7
 80017cc:	d90f      	bls.n	80017ee <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017d2:	e00c      	b.n	80017ee <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	d90b      	bls.n	80017f2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017de:	e008      	b.n	80017f2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	75fb      	strb	r3, [r7, #23]
        break;
 80017e4:	e006      	b.n	80017f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017e6:	bf00      	nop
 80017e8:	e004      	b.n	80017f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017ea:	bf00      	nop
 80017ec:	e002      	b.n	80017f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017ee:	bf00      	nop
 80017f0:	e000      	b.n	80017f4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017f2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10d      	bne.n	8001816 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 0118 	bic.w	r1, r3, #24
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	430a      	orrs	r2, r1
 8001814:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001816:	7dfb      	ldrb	r3, [r7, #23]
}
 8001818:	4618      	mov	r0, r3
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800182e:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_FLASH_Unlock+0x38>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	2b00      	cmp	r3, #0
 8001834:	da0b      	bge.n	800184e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_FLASH_Unlock+0x38>)
 8001838:	4a09      	ldr	r2, [pc, #36]	@ (8001860 <HAL_FLASH_Unlock+0x3c>)
 800183a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800183c:	4b07      	ldr	r3, [pc, #28]	@ (800185c <HAL_FLASH_Unlock+0x38>)
 800183e:	4a09      	ldr	r2, [pc, #36]	@ (8001864 <HAL_FLASH_Unlock+0x40>)
 8001840:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_FLASH_Unlock+0x38>)
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	2b00      	cmp	r3, #0
 8001848:	da01      	bge.n	800184e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800184e:	79fb      	ldrb	r3, [r7, #7]
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40022000 	.word	0x40022000
 8001860:	45670123 	.word	0x45670123
 8001864:	cdef89ab 	.word	0xcdef89ab

08001868 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_FLASH_Lock+0x1c>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	4a04      	ldr	r2, [pc, #16]	@ (8001884 <HAL_FLASH_Lock+0x1c>)
 8001872:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001876:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40022000 	.word	0x40022000

08001888 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff f9d0 	bl	8000c34 <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001896:	e00d      	b.n	80018b4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189e:	d009      	beq.n	80018b4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80018a0:	f7ff f9c8 	bl	8000c34 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d801      	bhi.n	80018b4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e036      	b.n	8001922 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80018b4:	4b1d      	ldr	r3, [pc, #116]	@ (800192c <FLASH_WaitForLastOperation+0xa4>)
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1eb      	bne.n	8001898 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80018c0:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <FLASH_WaitForLastOperation+0xa4>)
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01d      	beq.n	800190e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80018d2:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <FLASH_WaitForLastOperation+0xa8>)
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	4313      	orrs	r3, r2
 80018da:	4a15      	ldr	r2, [pc, #84]	@ (8001930 <FLASH_WaitForLastOperation+0xa8>)
 80018dc:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e4:	d307      	bcc.n	80018f6 <FLASH_WaitForLastOperation+0x6e>
 80018e6:	4b11      	ldr	r3, [pc, #68]	@ (800192c <FLASH_WaitForLastOperation+0xa4>)
 80018e8:	699a      	ldr	r2, [r3, #24]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80018f0:	490e      	ldr	r1, [pc, #56]	@ (800192c <FLASH_WaitForLastOperation+0xa4>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	618b      	str	r3, [r1, #24]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <FLASH_WaitForLastOperation+0x82>
 8001900:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <FLASH_WaitForLastOperation+0xa4>)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001908:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e009      	b.n	8001922 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <FLASH_WaitForLastOperation+0xa4>)
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800191a:	4b04      	ldr	r3, [pc, #16]	@ (800192c <FLASH_WaitForLastOperation+0xa4>)
 800191c:	2201      	movs	r2, #1
 800191e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40022000 	.word	0x40022000
 8001930:	20000014 	.word	0x20000014

08001934 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800193e:	4b49      	ldr	r3, [pc, #292]	@ (8001a64 <HAL_FLASHEx_Erase+0x130>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_FLASHEx_Erase+0x16>
 8001946:	2302      	movs	r3, #2
 8001948:	e087      	b.n	8001a5a <HAL_FLASHEx_Erase+0x126>
 800194a:	4b46      	ldr	r3, [pc, #280]	@ (8001a64 <HAL_FLASHEx_Erase+0x130>)
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001950:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001954:	f7ff ff98 	bl	8001888 <FLASH_WaitForLastOperation>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d177      	bne.n	8001a52 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001962:	4b40      	ldr	r3, [pc, #256]	@ (8001a64 <HAL_FLASHEx_Erase+0x130>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001968:	4b3f      	ldr	r3, [pc, #252]	@ (8001a68 <HAL_FLASHEx_Erase+0x134>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001974:	4b3c      	ldr	r3, [pc, #240]	@ (8001a68 <HAL_FLASHEx_Erase+0x134>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001980:	4b39      	ldr	r3, [pc, #228]	@ (8001a68 <HAL_FLASHEx_Erase+0x134>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a38      	ldr	r2, [pc, #224]	@ (8001a68 <HAL_FLASHEx_Erase+0x134>)
 8001986:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800198a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800198c:	4b35      	ldr	r3, [pc, #212]	@ (8001a64 <HAL_FLASHEx_Erase+0x130>)
 800198e:	2203      	movs	r2, #3
 8001990:	771a      	strb	r2, [r3, #28]
 8001992:	e016      	b.n	80019c2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001994:	4b33      	ldr	r3, [pc, #204]	@ (8001a64 <HAL_FLASHEx_Erase+0x130>)
 8001996:	2201      	movs	r2, #1
 8001998:	771a      	strb	r2, [r3, #28]
 800199a:	e012      	b.n	80019c2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800199c:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <HAL_FLASHEx_Erase+0x134>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d009      	beq.n	80019bc <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80019a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a68 <HAL_FLASHEx_Erase+0x134>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001a68 <HAL_FLASHEx_Erase+0x134>)
 80019ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80019b2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80019b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a64 <HAL_FLASHEx_Erase+0x130>)
 80019b6:	2202      	movs	r2, #2
 80019b8:	771a      	strb	r2, [r3, #28]
 80019ba:	e002      	b.n	80019c2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80019bc:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <HAL_FLASHEx_Erase+0x130>)
 80019be:	2200      	movs	r2, #0
 80019c0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d113      	bne.n	80019f2 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f84c 	bl	8001a6c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80019d8:	f7ff ff56 	bl	8001888 <FLASH_WaitForLastOperation>
 80019dc:	4603      	mov	r3, r0
 80019de:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80019e0:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <HAL_FLASHEx_Erase+0x134>)
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	4a20      	ldr	r2, [pc, #128]	@ (8001a68 <HAL_FLASHEx_Erase+0x134>)
 80019e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80019ea:	f023 0304 	bic.w	r3, r3, #4
 80019ee:	6153      	str	r3, [r2, #20]
 80019f0:	e02d      	b.n	8001a4e <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	e01d      	b.n	8001a3e <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4619      	mov	r1, r3
 8001a08:	68b8      	ldr	r0, [r7, #8]
 8001a0a:	f000 f857 	bl	8001abc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a0e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a12:	f7ff ff39 	bl	8001888 <FLASH_WaitForLastOperation>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001a1a:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <HAL_FLASHEx_Erase+0x134>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <HAL_FLASHEx_Erase+0x134>)
 8001a20:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a24:	f023 0302 	bic.w	r3, r3, #2
 8001a28:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	601a      	str	r2, [r3, #0]
          break;
 8001a36:	e00a      	b.n	8001a4e <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d3d9      	bcc.n	8001a02 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001a4e:	f000 f86b 	bl	8001b28 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a52:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <HAL_FLASHEx_Erase+0x130>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]

  return status;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000014 	.word	0x20000014
 8001a68:	40022000 	.word	0x40022000

08001a6c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab8 <FLASH_MassErase+0x4c>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab8 <FLASH_MassErase+0x4c>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <FLASH_MassErase+0x4c>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	4a07      	ldr	r2, [pc, #28]	@ (8001ab8 <FLASH_MassErase+0x4c>)
 8001a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a9e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <FLASH_MassErase+0x4c>)
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	4a04      	ldr	r2, [pc, #16]	@ (8001ab8 <FLASH_MassErase+0x4c>)
 8001aa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aaa:	6153      	str	r3, [r2, #20]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40022000 	.word	0x40022000

08001abc <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001ad0:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <FLASH_PageErase+0x68>)
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	4a13      	ldr	r2, [pc, #76]	@ (8001b24 <FLASH_PageErase+0x68>)
 8001ad6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ada:	6153      	str	r3, [r2, #20]
 8001adc:	e005      	b.n	8001aea <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8001ade:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <FLASH_PageErase+0x68>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	4a10      	ldr	r2, [pc, #64]	@ (8001b24 <FLASH_PageErase+0x68>)
 8001ae4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ae8:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001aea:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <FLASH_PageErase+0x68>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8001afa:	490a      	ldr	r1, [pc, #40]	@ (8001b24 <FLASH_PageErase+0x68>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <FLASH_PageErase+0x68>)
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	4a07      	ldr	r2, [pc, #28]	@ (8001b24 <FLASH_PageErase+0x68>)
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <FLASH_PageErase+0x68>)
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <FLASH_PageErase+0x68>)
 8001b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b16:	6153      	str	r3, [r2, #20]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40022000 	.word	0x40022000

08001b28 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <FLASH_FlushCaches+0x8c>)
 8001b30:	7f1b      	ldrb	r3, [r3, #28]
 8001b32:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d002      	beq.n	8001b40 <FLASH_FlushCaches+0x18>
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d117      	bne.n	8001b70 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001b40:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b46:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001b4a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a19      	ldr	r2, [pc, #100]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b52:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a16      	ldr	r2, [pc, #88]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001b62:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b64:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a13      	ldr	r2, [pc, #76]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b6e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d002      	beq.n	8001b7c <FLASH_FlushCaches+0x54>
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d111      	bne.n	8001ba0 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b82:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b92:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	@ (8001bb8 <FLASH_FlushCaches+0x90>)
 8001b9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b9e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001ba0:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <FLASH_FlushCaches+0x8c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	771a      	strb	r2, [r3, #28]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000014 	.word	0x20000014
 8001bb8:	40022000 	.word	0x40022000

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bca:	e17f      	b.n	8001ecc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8171 	beq.w	8001ec6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d005      	beq.n	8001bfc <HAL_GPIO_Init+0x40>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d130      	bne.n	8001c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c32:	2201      	movs	r2, #1
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 0201 	and.w	r2, r3, #1
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d118      	bne.n	8001c9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c70:	2201      	movs	r2, #1
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	08db      	lsrs	r3, r3, #3
 8001c86:	f003 0201 	and.w	r2, r3, #1
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d017      	beq.n	8001cd8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d123      	bne.n	8001d2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	08da      	lsrs	r2, r3, #3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3208      	adds	r2, #8
 8001cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	08da      	lsrs	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3208      	adds	r2, #8
 8001d26:	6939      	ldr	r1, [r7, #16]
 8001d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0203 	and.w	r2, r3, #3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80ac 	beq.w	8001ec6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001eec <HAL_GPIO_Init+0x330>)
 8001d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d72:	4a5e      	ldr	r2, [pc, #376]	@ (8001eec <HAL_GPIO_Init+0x330>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001eec <HAL_GPIO_Init+0x330>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d86:	4a5a      	ldr	r2, [pc, #360]	@ (8001ef0 <HAL_GPIO_Init+0x334>)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001db0:	d025      	beq.n	8001dfe <HAL_GPIO_Init+0x242>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4f      	ldr	r2, [pc, #316]	@ (8001ef4 <HAL_GPIO_Init+0x338>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01f      	beq.n	8001dfa <HAL_GPIO_Init+0x23e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4e      	ldr	r2, [pc, #312]	@ (8001ef8 <HAL_GPIO_Init+0x33c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d019      	beq.n	8001df6 <HAL_GPIO_Init+0x23a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4d      	ldr	r2, [pc, #308]	@ (8001efc <HAL_GPIO_Init+0x340>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0x236>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4c      	ldr	r2, [pc, #304]	@ (8001f00 <HAL_GPIO_Init+0x344>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00d      	beq.n	8001dee <HAL_GPIO_Init+0x232>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4b      	ldr	r2, [pc, #300]	@ (8001f04 <HAL_GPIO_Init+0x348>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_GPIO_Init+0x22e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8001f08 <HAL_GPIO_Init+0x34c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_GPIO_Init+0x22a>
 8001de2:	2306      	movs	r3, #6
 8001de4:	e00c      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001de6:	2307      	movs	r3, #7
 8001de8:	e00a      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001dea:	2305      	movs	r3, #5
 8001dec:	e008      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001dee:	2304      	movs	r3, #4
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001df2:	2303      	movs	r3, #3
 8001df4:	e004      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e002      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_GPIO_Init+0x244>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	f002 0203 	and.w	r2, r2, #3
 8001e06:	0092      	lsls	r2, r2, #2
 8001e08:	4093      	lsls	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e10:	4937      	ldr	r1, [pc, #220]	@ (8001ef0 <HAL_GPIO_Init+0x334>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f0c <HAL_GPIO_Init+0x350>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e42:	4a32      	ldr	r2, [pc, #200]	@ (8001f0c <HAL_GPIO_Init+0x350>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e48:	4b30      	ldr	r3, [pc, #192]	@ (8001f0c <HAL_GPIO_Init+0x350>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e6c:	4a27      	ldr	r2, [pc, #156]	@ (8001f0c <HAL_GPIO_Init+0x350>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e72:	4b26      	ldr	r3, [pc, #152]	@ (8001f0c <HAL_GPIO_Init+0x350>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e96:	4a1d      	ldr	r2, [pc, #116]	@ (8001f0c <HAL_GPIO_Init+0x350>)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <HAL_GPIO_Init+0x350>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ec0:	4a12      	ldr	r2, [pc, #72]	@ (8001f0c <HAL_GPIO_Init+0x350>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f47f ae78 	bne.w	8001bcc <HAL_GPIO_Init+0x10>
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010000 	.word	0x40010000
 8001ef4:	48000400 	.word	0x48000400
 8001ef8:	48000800 	.word	0x48000800
 8001efc:	48000c00 	.word	0x48000c00
 8001f00:	48001000 	.word	0x48001000
 8001f04:	48001400 	.word	0x48001400
 8001f08:	48001800 	.word	0x48001800
 8001f0c:	40010400 	.word	0x40010400

08001f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f20:	787b      	ldrb	r3, [r7, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40007000 	.word	0x40007000

08001f5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f6a:	d130      	bne.n	8001fce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f6c:	4b23      	ldr	r3, [pc, #140]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f78:	d038      	beq.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f7a:	4b20      	ldr	r3, [pc, #128]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f82:	4a1e      	ldr	r2, [pc, #120]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2232      	movs	r2, #50	@ 0x32
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	4a1b      	ldr	r2, [pc, #108]	@ (8002004 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0c9b      	lsrs	r3, r3, #18
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa0:	e002      	b.n	8001fa8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa8:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fb4:	d102      	bne.n	8001fbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f2      	bne.n	8001fa2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fc8:	d110      	bne.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e00f      	b.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fda:	d007      	beq.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fdc:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fe4:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40007000 	.word	0x40007000
 8002000:	20000008 	.word	0x20000008
 8002004:	431bde83 	.word	0x431bde83

08002008 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800200e:	4b4a      	ldr	r3, [pc, #296]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a49      	ldr	r2, [pc, #292]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800201a:	f7fe fe0b 	bl	8000c34 <HAL_GetTick>
 800201e:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002022:	f7fe fe07 	bl	8000c34 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e07c      	b.n	800212e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002034:	4b40      	ldr	r3, [pc, #256]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8002040:	4b3d      	ldr	r3, [pc, #244]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002048:	4a3b      	ldr	r2, [pc, #236]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 800204a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800204e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8002050:	4b39      	ldr	r3, [pc, #228]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 8002056:	4b39      	ldr	r3, [pc, #228]	@ (800213c <HAL_RCC_DeInit+0x134>)
 8002058:	4a39      	ldr	r2, [pc, #228]	@ (8002140 <HAL_RCC_DeInit+0x138>)
 800205a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800205c:	4b39      	ldr	r3, [pc, #228]	@ (8002144 <HAL_RCC_DeInit+0x13c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fd97 	bl	8000b94 <HAL_InitTick>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e05e      	b.n	800212e <HAL_RCC_DeInit+0x126>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8002070:	f7fe fde0 	bl	8000c34 <HAL_GetTick>
 8002074:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8002076:	e00a      	b.n	800208e <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002078:	f7fe fddc 	bl	8000c34 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e04f      	b.n	800212e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800208e:	4b2a      	ldr	r3, [pc, #168]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ee      	bne.n	8002078 <HAL_RCC_DeInit+0x70>
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 800209a:	4b27      	ldr	r3, [pc, #156]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4926      	ldr	r1, [pc, #152]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 80020a0:	4b29      	ldr	r3, [pc, #164]	@ (8002148 <HAL_RCC_DeInit+0x140>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80020a6:	f7fe fdc5 	bl	8000c34 <HAL_GetTick>
 80020aa:	6078      	str	r0, [r7, #4]

#if defined(RCC_PLLSAI2_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ae:	f7fe fdc1 	bl	8000c34 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e036      	b.n	800212e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 80020c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f0      	bne.n	80020ae <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 80020cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 80020d2:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	4a18      	ldr	r2, [pc, #96]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 80020d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020dc:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 80020de:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 80020e4:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	4a13      	ldr	r2, [pc, #76]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 80020ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020ee:	6113      	str	r3, [r2, #16]
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Reset PLLSAI2CFGR register */
  CLEAR_REG(RCC->PLLSAI2CFGR);
 80020f0:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 80020fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002100:	6153      	str	r3, [r2, #20]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002102:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a0c      	ldr	r2, [pc, #48]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 8002108:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800210c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800210e:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 8002116:	f04f 32ff 	mov.w	r2, #4294967295
 800211a:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800211c:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002122:	4a05      	ldr	r2, [pc, #20]	@ (8002138 <HAL_RCC_DeInit+0x130>)
 8002124:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002128:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	20000008 	.word	0x20000008
 8002140:	003d0900 	.word	0x003d0900
 8002144:	2000000c 	.word	0x2000000c
 8002148:	eafef4ff 	.word	0xeafef4ff

0800214c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e3ca      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215e:	4b97      	ldr	r3, [pc, #604]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002168:	4b94      	ldr	r3, [pc, #592]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80e4 	beq.w	8002348 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_RCC_OscConfig+0x4a>
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b0c      	cmp	r3, #12
 800218a:	f040 808b 	bne.w	80022a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b01      	cmp	r3, #1
 8002192:	f040 8087 	bne.w	80022a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002196:	4b89      	ldr	r3, [pc, #548]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d005      	beq.n	80021ae <HAL_RCC_OscConfig+0x62>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e3a2      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1a      	ldr	r2, [r3, #32]
 80021b2:	4b82      	ldr	r3, [pc, #520]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <HAL_RCC_OscConfig+0x7c>
 80021be:	4b7f      	ldr	r3, [pc, #508]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021c6:	e005      	b.n	80021d4 <HAL_RCC_OscConfig+0x88>
 80021c8:	4b7c      	ldr	r3, [pc, #496]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80021ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d223      	bcs.n	8002220 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fd1d 	bl	8002c1c <RCC_SetFlashLatencyFromMSIRange>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e383      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ec:	4b73      	ldr	r3, [pc, #460]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a72      	ldr	r2, [pc, #456]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80021f2:	f043 0308 	orr.w	r3, r3, #8
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b70      	ldr	r3, [pc, #448]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	496d      	ldr	r1, [pc, #436]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220a:	4b6c      	ldr	r3, [pc, #432]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	4968      	ldr	r1, [pc, #416]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
 800221e:	e025      	b.n	800226c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002220:	4b66      	ldr	r3, [pc, #408]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a65      	ldr	r2, [pc, #404]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 8002226:	f043 0308 	orr.w	r3, r3, #8
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b63      	ldr	r3, [pc, #396]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4960      	ldr	r1, [pc, #384]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800223e:	4b5f      	ldr	r3, [pc, #380]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	495b      	ldr	r1, [pc, #364]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fcdd 	bl	8002c1c <RCC_SetFlashLatencyFromMSIRange>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e343      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800226c:	f000 fc4a 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b52      	ldr	r3, [pc, #328]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	4950      	ldr	r1, [pc, #320]	@ (80023c0 <HAL_RCC_OscConfig+0x274>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
 8002288:	4a4e      	ldr	r2, [pc, #312]	@ (80023c4 <HAL_RCC_OscConfig+0x278>)
 800228a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800228c:	4b4e      	ldr	r3, [pc, #312]	@ (80023c8 <HAL_RCC_OscConfig+0x27c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fc7f 	bl	8000b94 <HAL_InitTick>
 8002296:	4603      	mov	r3, r0
 8002298:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d052      	beq.n	8002346 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	e327      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d032      	beq.n	8002312 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022ac:	4b43      	ldr	r3, [pc, #268]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a42      	ldr	r2, [pc, #264]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022b8:	f7fe fcbc 	bl	8000c34 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c0:	f7fe fcb8 	bl	8000c34 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e310      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d2:	4b3a      	ldr	r3, [pc, #232]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022de:	4b37      	ldr	r3, [pc, #220]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a36      	ldr	r2, [pc, #216]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b34      	ldr	r3, [pc, #208]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4931      	ldr	r1, [pc, #196]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fc:	4b2f      	ldr	r3, [pc, #188]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	492c      	ldr	r1, [pc, #176]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
 8002310:	e01a      	b.n	8002348 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002312:	4b2a      	ldr	r3, [pc, #168]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a29      	ldr	r2, [pc, #164]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800231e:	f7fe fc89 	bl	8000c34 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002326:	f7fe fc85 	bl	8000c34 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e2dd      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002338:	4b20      	ldr	r3, [pc, #128]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f0      	bne.n	8002326 <HAL_RCC_OscConfig+0x1da>
 8002344:	e000      	b.n	8002348 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002346:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d074      	beq.n	800243e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2b08      	cmp	r3, #8
 8002358:	d005      	beq.n	8002366 <HAL_RCC_OscConfig+0x21a>
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b0c      	cmp	r3, #12
 800235e:	d10e      	bne.n	800237e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d10b      	bne.n	800237e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002366:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d064      	beq.n	800243c <HAL_RCC_OscConfig+0x2f0>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d160      	bne.n	800243c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e2ba      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x24a>
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0b      	ldr	r2, [pc, #44]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e026      	b.n	80023e4 <HAL_RCC_OscConfig+0x298>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800239e:	d115      	bne.n	80023cc <HAL_RCC_OscConfig+0x280>
 80023a0:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a05      	ldr	r2, [pc, #20]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80023a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b03      	ldr	r3, [pc, #12]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a02      	ldr	r2, [pc, #8]	@ (80023bc <HAL_RCC_OscConfig+0x270>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	e014      	b.n	80023e4 <HAL_RCC_OscConfig+0x298>
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
 80023c0:	08003010 	.word	0x08003010
 80023c4:	20000008 	.word	0x20000008
 80023c8:	2000000c 	.word	0x2000000c
 80023cc:	4ba0      	ldr	r3, [pc, #640]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a9f      	ldr	r2, [pc, #636]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 80023d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b9d      	ldr	r3, [pc, #628]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a9c      	ldr	r2, [pc, #624]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 80023de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d013      	beq.n	8002414 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe fc22 	bl	8000c34 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7fe fc1e 	bl	8000c34 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	@ 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e276      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002406:	4b92      	ldr	r3, [pc, #584]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x2a8>
 8002412:	e014      	b.n	800243e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fc0e 	bl	8000c34 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe fc0a 	bl	8000c34 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	@ 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e262      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800242e:	4b88      	ldr	r3, [pc, #544]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x2d0>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d060      	beq.n	800250c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b04      	cmp	r3, #4
 800244e:	d005      	beq.n	800245c <HAL_RCC_OscConfig+0x310>
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d119      	bne.n	800248a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d116      	bne.n	800248a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245c:	4b7c      	ldr	r3, [pc, #496]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_OscConfig+0x328>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e23f      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b76      	ldr	r3, [pc, #472]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	061b      	lsls	r3, r3, #24
 8002482:	4973      	ldr	r1, [pc, #460]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002488:	e040      	b.n	800250c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d023      	beq.n	80024da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002492:	4b6f      	ldr	r3, [pc, #444]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6e      	ldr	r2, [pc, #440]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800249c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7fe fbc9 	bl	8000c34 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a6:	f7fe fbc5 	bl	8000c34 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e21d      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b8:	4b65      	ldr	r3, [pc, #404]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b62      	ldr	r3, [pc, #392]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	061b      	lsls	r3, r3, #24
 80024d2:	495f      	ldr	r1, [pc, #380]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
 80024d8:	e018      	b.n	800250c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b5d      	ldr	r3, [pc, #372]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a5c      	ldr	r2, [pc, #368]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 80024e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7fe fba5 	bl	8000c34 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ee:	f7fe fba1 	bl	8000c34 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e1f9      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002500:	4b53      	ldr	r3, [pc, #332]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d03c      	beq.n	8002592 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01c      	beq.n	800255a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002520:	4b4b      	ldr	r3, [pc, #300]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002526:	4a4a      	ldr	r2, [pc, #296]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fb80 	bl	8000c34 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fb7c 	bl	8000c34 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e1d4      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800254a:	4b41      	ldr	r3, [pc, #260]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 800254c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ef      	beq.n	8002538 <HAL_RCC_OscConfig+0x3ec>
 8002558:	e01b      	b.n	8002592 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	4b3d      	ldr	r3, [pc, #244]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 800255c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002560:	4a3b      	ldr	r2, [pc, #236]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256a:	f7fe fb63 	bl	8000c34 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002572:	f7fe fb5f 	bl	8000c34 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e1b7      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002584:	4b32      	ldr	r3, [pc, #200]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1ef      	bne.n	8002572 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80a6 	beq.w	80026ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a0:	2300      	movs	r3, #0
 80025a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10d      	bne.n	80025cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b0:	4b27      	ldr	r3, [pc, #156]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 80025b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b4:	4a26      	ldr	r2, [pc, #152]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 80025b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80025bc:	4b24      	ldr	r3, [pc, #144]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c8:	2301      	movs	r3, #1
 80025ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025cc:	4b21      	ldr	r3, [pc, #132]	@ (8002654 <HAL_RCC_OscConfig+0x508>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d118      	bne.n	800260a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <HAL_RCC_OscConfig+0x508>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002654 <HAL_RCC_OscConfig+0x508>)
 80025de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e4:	f7fe fb26 	bl	8000c34 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ec:	f7fe fb22 	bl	8000c34 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e17a      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025fe:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <HAL_RCC_OscConfig+0x508>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d108      	bne.n	8002624 <HAL_RCC_OscConfig+0x4d8>
 8002612:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002618:	4a0d      	ldr	r2, [pc, #52]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002622:	e029      	b.n	8002678 <HAL_RCC_OscConfig+0x52c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b05      	cmp	r3, #5
 800262a:	d115      	bne.n	8002658 <HAL_RCC_OscConfig+0x50c>
 800262c:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002632:	4a07      	ldr	r2, [pc, #28]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800263c:	4b04      	ldr	r3, [pc, #16]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002642:	4a03      	ldr	r2, [pc, #12]	@ (8002650 <HAL_RCC_OscConfig+0x504>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800264c:	e014      	b.n	8002678 <HAL_RCC_OscConfig+0x52c>
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	40007000 	.word	0x40007000
 8002658:	4b9c      	ldr	r3, [pc, #624]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265e:	4a9b      	ldr	r2, [pc, #620]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002668:	4b98      	ldr	r3, [pc, #608]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266e:	4a97      	ldr	r2, [pc, #604]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d016      	beq.n	80026ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe fad8 	bl	8000c34 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7fe fad4 	bl	8000c34 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e12a      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269e:	4b8b      	ldr	r3, [pc, #556]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0ed      	beq.n	8002688 <HAL_RCC_OscConfig+0x53c>
 80026ac:	e015      	b.n	80026da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7fe fac1 	bl	8000c34 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fe fabd 	bl	8000c34 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e113      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026cc:	4b7f      	ldr	r3, [pc, #508]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1ed      	bne.n	80026b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026da:	7ffb      	ldrb	r3, [r7, #31]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e0:	4b7a      	ldr	r3, [pc, #488]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	4a79      	ldr	r2, [pc, #484]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 80026e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80fe 	beq.w	80028f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	f040 80d0 	bne.w	80028a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002700:	4b72      	ldr	r3, [pc, #456]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f003 0203 	and.w	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	429a      	cmp	r2, r3
 8002712:	d130      	bne.n	8002776 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	3b01      	subs	r3, #1
 8002720:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d127      	bne.n	8002776 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002730:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d11f      	bne.n	8002776 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002740:	2a07      	cmp	r2, #7
 8002742:	bf14      	ite	ne
 8002744:	2201      	movne	r2, #1
 8002746:	2200      	moveq	r2, #0
 8002748:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800274a:	4293      	cmp	r3, r2
 800274c:	d113      	bne.n	8002776 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	3b01      	subs	r3, #1
 800275c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d109      	bne.n	8002776 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	3b01      	subs	r3, #1
 8002770:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d06e      	beq.n	8002854 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b0c      	cmp	r3, #12
 800277a:	d069      	beq.n	8002850 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800277c:	4b53      	ldr	r3, [pc, #332]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002788:	4b50      	ldr	r3, [pc, #320]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0ad      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002798:	4b4c      	ldr	r3, [pc, #304]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a4b      	ldr	r2, [pc, #300]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 800279e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027a4:	f7fe fa46 	bl	8000c34 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fe fa42 	bl	8000c34 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e09a      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027be:	4b43      	ldr	r3, [pc, #268]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ca:	4b40      	ldr	r3, [pc, #256]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	4b40      	ldr	r3, [pc, #256]	@ (80028d0 <HAL_RCC_OscConfig+0x784>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80027da:	3a01      	subs	r2, #1
 80027dc:	0112      	lsls	r2, r2, #4
 80027de:	4311      	orrs	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027e4:	0212      	lsls	r2, r2, #8
 80027e6:	4311      	orrs	r1, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027ec:	0852      	lsrs	r2, r2, #1
 80027ee:	3a01      	subs	r2, #1
 80027f0:	0552      	lsls	r2, r2, #21
 80027f2:	4311      	orrs	r1, r2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027f8:	0852      	lsrs	r2, r2, #1
 80027fa:	3a01      	subs	r2, #1
 80027fc:	0652      	lsls	r2, r2, #25
 80027fe:	4311      	orrs	r1, r2
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002804:	0912      	lsrs	r2, r2, #4
 8002806:	0452      	lsls	r2, r2, #17
 8002808:	430a      	orrs	r2, r1
 800280a:	4930      	ldr	r1, [pc, #192]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 800280c:	4313      	orrs	r3, r2
 800280e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002810:	4b2e      	ldr	r3, [pc, #184]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2d      	ldr	r2, [pc, #180]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 8002816:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800281a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800281c:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a2a      	ldr	r2, [pc, #168]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 8002822:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002826:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002828:	f7fe fa04 	bl	8000c34 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002830:	f7fe fa00 	bl	8000c34 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e058      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002842:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800284e:	e050      	b.n	80028f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e04f      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002854:	4b1d      	ldr	r3, [pc, #116]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d148      	bne.n	80028f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002860:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a19      	ldr	r2, [pc, #100]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 8002866:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800286a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800286c:	4b17      	ldr	r3, [pc, #92]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4a16      	ldr	r2, [pc, #88]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 8002872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002876:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002878:	f7fe f9dc 	bl	8000c34 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe f9d8 	bl	8000c34 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e030      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002892:	4b0e      	ldr	r3, [pc, #56]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x734>
 800289e:	e028      	b.n	80028f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d023      	beq.n	80028ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a08      	ldr	r2, [pc, #32]	@ (80028cc <HAL_RCC_OscConfig+0x780>)
 80028ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7fe f9bf 	bl	8000c34 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b8:	e00c      	b.n	80028d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ba:	f7fe f9bb 	bl	8000c34 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d905      	bls.n	80028d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e013      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
 80028cc:	40021000 	.word	0x40021000
 80028d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d4:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <HAL_RCC_OscConfig+0x7b0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ec      	bne.n	80028ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028e0:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <HAL_RCC_OscConfig+0x7b0>)
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	4905      	ldr	r1, [pc, #20]	@ (80028fc <HAL_RCC_OscConfig+0x7b0>)
 80028e6:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <HAL_RCC_OscConfig+0x7b4>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
 80028ec:	e001      	b.n	80028f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3720      	adds	r7, #32
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000
 8002900:	feeefffc 	.word	0xfeeefffc

08002904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0e7      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b75      	ldr	r3, [pc, #468]	@ (8002af0 <HAL_RCC_ClockConfig+0x1ec>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d910      	bls.n	8002948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b72      	ldr	r3, [pc, #456]	@ (8002af0 <HAL_RCC_ClockConfig+0x1ec>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 0207 	bic.w	r2, r3, #7
 800292e:	4970      	ldr	r1, [pc, #448]	@ (8002af0 <HAL_RCC_ClockConfig+0x1ec>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b6e      	ldr	r3, [pc, #440]	@ (8002af0 <HAL_RCC_ClockConfig+0x1ec>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0cf      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d010      	beq.n	8002976 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	4b66      	ldr	r3, [pc, #408]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002960:	429a      	cmp	r2, r3
 8002962:	d908      	bls.n	8002976 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002964:	4b63      	ldr	r3, [pc, #396]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4960      	ldr	r1, [pc, #384]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d04c      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298a:	4b5a      	ldr	r3, [pc, #360]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d121      	bne.n	80029da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0a6      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a2:	4b54      	ldr	r3, [pc, #336]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d115      	bne.n	80029da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e09a      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029ba:	4b4e      	ldr	r3, [pc, #312]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e08e      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ca:	4b4a      	ldr	r3, [pc, #296]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e086      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029da:	4b46      	ldr	r3, [pc, #280]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f023 0203 	bic.w	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4943      	ldr	r1, [pc, #268]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ec:	f7fe f922 	bl	8000c34 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f4:	f7fe f91e 	bl	8000c34 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e06e      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	4b3a      	ldr	r3, [pc, #232]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 020c 	and.w	r2, r3, #12
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d1eb      	bne.n	80029f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d010      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	4b31      	ldr	r3, [pc, #196]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d208      	bcs.n	8002a4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b2e      	ldr	r3, [pc, #184]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	492b      	ldr	r1, [pc, #172]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a4a:	4b29      	ldr	r3, [pc, #164]	@ (8002af0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d210      	bcs.n	8002a7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 0207 	bic.w	r2, r3, #7
 8002a60:	4923      	ldr	r1, [pc, #140]	@ (8002af0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a68:	4b21      	ldr	r3, [pc, #132]	@ (8002af0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e036      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a86:	4b1b      	ldr	r3, [pc, #108]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4918      	ldr	r1, [pc, #96]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa4:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4910      	ldr	r1, [pc, #64]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ab8:	f000 f824 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	490b      	ldr	r1, [pc, #44]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f4>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad4:	4a09      	ldr	r2, [pc, #36]	@ (8002afc <HAL_RCC_ClockConfig+0x1f8>)
 8002ad6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ad8:	4b09      	ldr	r3, [pc, #36]	@ (8002b00 <HAL_RCC_ClockConfig+0x1fc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe f859 	bl	8000b94 <HAL_InitTick>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ae6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40022000 	.word	0x40022000
 8002af4:	40021000 	.word	0x40021000
 8002af8:	08003010 	.word	0x08003010
 8002afc:	20000008 	.word	0x20000008
 8002b00:	2000000c 	.word	0x2000000c

08002b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	@ 0x24
 8002b08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b12:	4b3e      	ldr	r3, [pc, #248]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x34>
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	d121      	bne.n	8002b76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d11e      	bne.n	8002b76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b38:	4b34      	ldr	r3, [pc, #208]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d107      	bne.n	8002b54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b44:	4b31      	ldr	r3, [pc, #196]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	e005      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b54:	4b2d      	ldr	r3, [pc, #180]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b60:	4a2b      	ldr	r2, [pc, #172]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10d      	bne.n	8002b8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d102      	bne.n	8002b82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b7c:	4b25      	ldr	r3, [pc, #148]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	e004      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b88:	4b23      	ldr	r3, [pc, #140]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	d134      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b92:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0xa6>
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d003      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ba8:	e005      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002baa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bac:	617b      	str	r3, [r7, #20]
      break;
 8002bae:	e005      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bb0:	4b19      	ldr	r3, [pc, #100]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bb2:	617b      	str	r3, [r7, #20]
      break;
 8002bb4:	e002      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	617b      	str	r3, [r7, #20]
      break;
 8002bba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bbc:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bca:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	fb03 f202 	mul.w	r2, r3, r2
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002be2:	4b0a      	ldr	r3, [pc, #40]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	0e5b      	lsrs	r3, r3, #25
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	3301      	adds	r3, #1
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bfc:	69bb      	ldr	r3, [r7, #24]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3724      	adds	r7, #36	@ 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	08003020 	.word	0x08003020
 8002c14:	00f42400 	.word	0x00f42400
 8002c18:	007a1200 	.word	0x007a1200

08002c1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c28:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c34:	f7ff f984 	bl	8001f40 <HAL_PWREx_GetVoltageRange>
 8002c38:	6178      	str	r0, [r7, #20]
 8002c3a:	e014      	b.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c40:	4a24      	ldr	r2, [pc, #144]	@ (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c48:	4b22      	ldr	r3, [pc, #136]	@ (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c54:	f7ff f974 	bl	8001f40 <HAL_PWREx_GetVoltageRange>
 8002c58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c64:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c6c:	d10b      	bne.n	8002c86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b80      	cmp	r3, #128	@ 0x80
 8002c72:	d919      	bls.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c78:	d902      	bls.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	e013      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c80:	2301      	movs	r3, #1
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	e010      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b80      	cmp	r3, #128	@ 0x80
 8002c8a:	d902      	bls.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e00a      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b80      	cmp	r3, #128	@ 0x80
 8002c96:	d102      	bne.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c98:	2302      	movs	r3, #2
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	e004      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b70      	cmp	r3, #112	@ 0x70
 8002ca2:	d101      	bne.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 0207 	bic.w	r2, r3, #7
 8002cb0:	4909      	ldr	r1, [pc, #36]	@ (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cb8:	4b07      	ldr	r3, [pc, #28]	@ (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40022000 	.word	0x40022000

08002cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e049      	b.n	8002d82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd fe66 	bl	80009d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f000 f8a6 	bl	8002e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d001      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e04f      	b.n	8002e44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a23      	ldr	r2, [pc, #140]	@ (8002e50 <HAL_TIM_Base_Start_IT+0xc4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01d      	beq.n	8002e02 <HAL_TIM_Base_Start_IT+0x76>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dce:	d018      	beq.n	8002e02 <HAL_TIM_Base_Start_IT+0x76>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e54 <HAL_TIM_Base_Start_IT+0xc8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_TIM_Base_Start_IT+0x76>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1e      	ldr	r2, [pc, #120]	@ (8002e58 <HAL_TIM_Base_Start_IT+0xcc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00e      	beq.n	8002e02 <HAL_TIM_Base_Start_IT+0x76>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e5c <HAL_TIM_Base_Start_IT+0xd0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d009      	beq.n	8002e02 <HAL_TIM_Base_Start_IT+0x76>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e60 <HAL_TIM_Base_Start_IT+0xd4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d004      	beq.n	8002e02 <HAL_TIM_Base_Start_IT+0x76>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a19      	ldr	r2, [pc, #100]	@ (8002e64 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d115      	bne.n	8002e2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	4b17      	ldr	r3, [pc, #92]	@ (8002e68 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b06      	cmp	r3, #6
 8002e12:	d015      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0xb4>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e1a:	d011      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2c:	e008      	b.n	8002e40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	e000      	b.n	8002e42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800
 8002e5c:	40000c00 	.word	0x40000c00
 8002e60:	40013400 	.word	0x40013400
 8002e64:	40014000 	.word	0x40014000
 8002e68:	00010007 	.word	0x00010007

08002e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a40      	ldr	r2, [pc, #256]	@ (8002f80 <TIM_Base_SetConfig+0x114>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d013      	beq.n	8002eac <TIM_Base_SetConfig+0x40>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e8a:	d00f      	beq.n	8002eac <TIM_Base_SetConfig+0x40>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f84 <TIM_Base_SetConfig+0x118>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00b      	beq.n	8002eac <TIM_Base_SetConfig+0x40>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a3c      	ldr	r2, [pc, #240]	@ (8002f88 <TIM_Base_SetConfig+0x11c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d007      	beq.n	8002eac <TIM_Base_SetConfig+0x40>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f8c <TIM_Base_SetConfig+0x120>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d003      	beq.n	8002eac <TIM_Base_SetConfig+0x40>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a3a      	ldr	r2, [pc, #232]	@ (8002f90 <TIM_Base_SetConfig+0x124>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d108      	bne.n	8002ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8002f80 <TIM_Base_SetConfig+0x114>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01f      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ecc:	d01b      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a2c      	ldr	r2, [pc, #176]	@ (8002f84 <TIM_Base_SetConfig+0x118>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d017      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f88 <TIM_Base_SetConfig+0x11c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f8c <TIM_Base_SetConfig+0x120>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00f      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a29      	ldr	r2, [pc, #164]	@ (8002f90 <TIM_Base_SetConfig+0x124>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a28      	ldr	r2, [pc, #160]	@ (8002f94 <TIM_Base_SetConfig+0x128>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a27      	ldr	r2, [pc, #156]	@ (8002f98 <TIM_Base_SetConfig+0x12c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_Base_SetConfig+0x9a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a26      	ldr	r2, [pc, #152]	@ (8002f9c <TIM_Base_SetConfig+0x130>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a10      	ldr	r2, [pc, #64]	@ (8002f80 <TIM_Base_SetConfig+0x114>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00f      	beq.n	8002f64 <TIM_Base_SetConfig+0xf8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a12      	ldr	r2, [pc, #72]	@ (8002f90 <TIM_Base_SetConfig+0x124>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <TIM_Base_SetConfig+0xf8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a11      	ldr	r2, [pc, #68]	@ (8002f94 <TIM_Base_SetConfig+0x128>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d007      	beq.n	8002f64 <TIM_Base_SetConfig+0xf8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a10      	ldr	r2, [pc, #64]	@ (8002f98 <TIM_Base_SetConfig+0x12c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <TIM_Base_SetConfig+0xf8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f9c <TIM_Base_SetConfig+0x130>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d103      	bne.n	8002f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	615a      	str	r2, [r3, #20]
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	40013400 	.word	0x40013400
 8002f94:	40014000 	.word	0x40014000
 8002f98:	40014400 	.word	0x40014400
 8002f9c:	40014800 	.word	0x40014800

08002fa0 <memset>:
 8002fa0:	4402      	add	r2, r0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d100      	bne.n	8002faa <memset+0xa>
 8002fa8:	4770      	bx	lr
 8002faa:	f803 1b01 	strb.w	r1, [r3], #1
 8002fae:	e7f9      	b.n	8002fa4 <memset+0x4>

08002fb0 <__libc_init_array>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	4d0d      	ldr	r5, [pc, #52]	@ (8002fe8 <__libc_init_array+0x38>)
 8002fb4:	4c0d      	ldr	r4, [pc, #52]	@ (8002fec <__libc_init_array+0x3c>)
 8002fb6:	1b64      	subs	r4, r4, r5
 8002fb8:	10a4      	asrs	r4, r4, #2
 8002fba:	2600      	movs	r6, #0
 8002fbc:	42a6      	cmp	r6, r4
 8002fbe:	d109      	bne.n	8002fd4 <__libc_init_array+0x24>
 8002fc0:	4d0b      	ldr	r5, [pc, #44]	@ (8002ff0 <__libc_init_array+0x40>)
 8002fc2:	4c0c      	ldr	r4, [pc, #48]	@ (8002ff4 <__libc_init_array+0x44>)
 8002fc4:	f000 f818 	bl	8002ff8 <_init>
 8002fc8:	1b64      	subs	r4, r4, r5
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	2600      	movs	r6, #0
 8002fce:	42a6      	cmp	r6, r4
 8002fd0:	d105      	bne.n	8002fde <__libc_init_array+0x2e>
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
 8002fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd8:	4798      	blx	r3
 8002fda:	3601      	adds	r6, #1
 8002fdc:	e7ee      	b.n	8002fbc <__libc_init_array+0xc>
 8002fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe2:	4798      	blx	r3
 8002fe4:	3601      	adds	r6, #1
 8002fe6:	e7f2      	b.n	8002fce <__libc_init_array+0x1e>
 8002fe8:	08003050 	.word	0x08003050
 8002fec:	08003050 	.word	0x08003050
 8002ff0:	08003050 	.word	0x08003050
 8002ff4:	08003054 	.word	0x08003054

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr
